
--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\layout.tsx ---
// app/layout.tsx
import "../styles/globals.css"
//import "./globals.css";
import { Inter } from "next/font/google";
import Image from "next/image";
import Link from "next/link";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Observability-CIG",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body className={`${inter.className} bg-gray-50`}>
        {/* Global Logo in Top-Right Corner */}
        <div className="fixed top-4 right-4 z-50">
          <Link href="/dashboard">
            <Image
              src="/Intelliswift-1.png"
              alt="Intelliswift Logo"
              width={120}
              height={30}
              className="opacity-80 hover:opacity-100 transition-opacity"
            />
          </Link>
        </div>
        {children}
      </body>
    </html>
  );
}


// import "../styles/globals.css";

// import { Inter } from "next/font/google";
// const inter = Inter({ subsets: ["latin"] });

// export default function RootLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <html lang="en">
//       <body className={`${inter.className} bg-gray-50`}>{children}</body>
//     </html>
//   );
// }

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\page.tsx ---
// file: app/page.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { User, Lock, ArrowRight } from 'lucide-react';

export default function LoginPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (username === 'admin' && password === 'admin') {
      router.push('/dashboard');
    } else {
      setError('Invalid username or password. Please try again.');
    }
  };

  const ObservabilityIcon = () => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="1"
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-24 w-24 text-violet-400 drop-shadow-md"
    >
      <circle cx="12" cy="12" r="3" />
      <path d="M20.94 10.94a9 9 0 1 1-1.41-1.41" />
      <path d="M15.54 6.46l-1.08 1.08" />
      <path d="M6.46 15.54l-1.08 1.08" />
      <path d="M12 2v4" />
      <path d="M12 18v4" />
      <path d="M4.93 4.93l2.83 2.83" />
      <path d="M16.24 16.24l2.83 2.83" />
      <path d="M2 12h4" />
      <path d="M18 12h4" />
    </svg>
  );

  return (
    <div className="flex min-h-screen bg-slate-950 text-gray-200 font-sans">
      {/* Left Branding Section */}
      <div className="hidden lg:flex lg:w-1/2 flex-col items-center justify-center px-16 py-12 bg-gradient-to-br from-slate-900 to-slate-800 text-center">
        <ObservabilityIcon />
        <div className="flex items-center gap-4 mt-6">
          <Image
            src="/intell_logo_1.png"
            alt="IntelliTrace Logo"
            width={50}
            height={50}
            className=""
          />
          <h2 className="text-4xl font-extrabold tracking-tight text-white">
            Observability Copilot
          </h2>
        </div>
        <p className="mt-4 text-lg text-gray-400 max-w-sm">
          Unify your logs, metrics, and traces â€” powered by AI-driven insight.
        </p>
      </div>

      {/* Right Login Section */}
      <div className="w-full lg:w-1/2 flex items-center justify-center px-6 py-12">
        <div className="w-full max-w-md space-y-8">
          <div>
            <h1 className="text-3xl font-bold text-white">Welcome back</h1>
            <p className="mt-2 text-sm text-gray-400">
              Please enter your credentials to access your dashboard.
            </p>
          </div>

          <form onSubmit={handleLogin} className="space-y-6">
            {/* Username */}
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-400 mb-2">
                Username
              </label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                <input
                  type="text"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 bg-slate-800 border border-slate-700 rounded-md text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-violet-500 transition-all"
                  placeholder="Enter your username"
                  required
                />
              </div>
            </div>

            {/* Password */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-400 mb-2">
                Password
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-500" />
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full pl-10 pr-4 py-3 bg-slate-800 border border-slate-700 rounded-md text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-violet-500 transition-all"
                  placeholder="Enter your password"
                  required
                />
              </div>
            </div>

            {/* Error Message */}
            {error && (
              <div className="text-sm text-red-400 bg-red-950 border border-red-800 rounded p-2 text-center animate-pulse">
                {error}
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full flex justify-center items-center gap-2 py-3 px-4 bg-violet-600 hover:bg-violet-700 transition-colors rounded-md font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-violet-500"
            >
              Login
              <ArrowRight size={18} />
            </button>
          </form>

          {/* Footer */}
          <p className="text-xs text-center text-gray-500 mt-8">
            &copy; {new Date().getFullYear()} Intellishift. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\cloudwatch\log\route.ts ---
// file: app/api/cloudwatch/log/route.ts

import { NextResponse } from 'next/server';
import { createClient } from 'redis';
import { CloudWatchLogsClient, FilterLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';
import logger from '@/utils/logger';

const redis = createClient({ url: process.env.REDIS_URL });

async function ensureRedisConnection() {
  if (!redis.isOpen) {
    try {
      await redis.connect();
    } catch (err) {
      logger.error({ err }, 'Failed to connect to Redis.');
      throw new Error('Database connection failed.');
    }
  }
}

const SETTINGS_KEY = 'app_tool_configurations';

export async function GET() {
  try {
    await ensureRedisConnection();
    const settingsString = await redis.get(SETTINGS_KEY);
    if (!settingsString) throw new Error('CloudWatch settings not found.');

    const settings: any = JSON.parse(settingsString);
    const awsConfig = settings.configs?.cloudwatch;

    if (!awsConfig?.AWS_ACCESS_KEY_ID || !awsConfig?.AWS_SECRET_ACCESS_KEY || !awsConfig?.AWS_REGIONS_LOG_GROUPS) {
      throw new Error('AWS credentials or region/log group config is missing in settings.');
    }
    
    const regionConfigs = JSON.parse(awsConfig.AWS_REGIONS_LOG_GROUPS);

    // This will hold promises for fetching logs from all groups across all regions
    const allLogPromises: Promise<any>[] = [];

    for (const config of regionConfigs) {
      const { region, logGroups } = config;
      if (!region || !logGroups || logGroups.length === 0) continue;

      const client = new CloudWatchLogsClient({
        region: region,
        credentials: {
          accessKeyId: awsConfig.AWS_ACCESS_KEY_ID,
          secretAccessKey: awsConfig.AWS_SECRET_ACCESS_KEY,
        },
      });

      for (const logGroupName of logGroups) {
        const command = new FilterLogEventsCommand({
          logGroupName: logGroupName,
          limit: 50,
        });
        
        const promise = client.send(command).then(response => ({
          region,
          logGroupName,
          logs: response.events?.map(event => event.message).join('\n') || 'No recent logs found.',
        })).catch(err => {
            logger.error({err, region, logGroupName}, "Failed to fetch logs for a specific group");
            return { region, logGroupName, logs: `Error fetching logs: ${err.message}` };
        });

        allLogPromises.push(promise);
      }
    }

    const results = await Promise.all(allLogPromises);

    logger.info('Successfully processed CloudWatch log fetch requests.');
    return NextResponse.json({ logGroups: results });

  } catch (error: any) {
    logger.error({ err: error }, 'Error in CloudWatch log route.');
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\gcp\log\route.ts ---
// file: app/api/gcp/log/route.ts

// file: app/api/gcp/log/route.ts

import { NextResponse } from 'next/server';
import { createClient } from 'redis';
import { Logging } from '@google-cloud/logging';
import logger from '@/utils/logger';

const redis = createClient({ url: process.env.REDIS_URL });

async function ensureRedisConnection() {
  if (!redis.isOpen) {
    try {
      await redis.connect();
    } catch (err) {
      logger.error({ err }, 'Failed to connect to Redis.');
      throw new Error('Database connection failed.');
    }
  }
}

const SETTINGS_KEY = 'app_tool_configurations';

export async function GET() {
  try {
    await ensureRedisConnection();
    const settingsString = await redis.get(SETTINGS_KEY);
    if (!settingsString) throw new Error('GCP settings not found.');

    const settings: any = JSON.parse(settingsString);
    const gcpKeys = settings.configs?.gcp?.GCP_PROJECT_KEYS_JSON;

    if (!gcpKeys || !Array.isArray(gcpKeys) || gcpKeys.length === 0) {
      throw new Error('GCP project keys are not configured in settings.');
    }

    const promises = gcpKeys.map(async (keyJson: string) => {
      try {
        const credentials = JSON.parse(keyJson);
        const projectId = credentials.project_id;

        const logging = new Logging({ projectId, credentials });

        const filter = `timestamp>="${new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()}" AND logName !~ "cloudaudit.googleapis.com"`;
        
        const [entries] = await logging.getEntries({ filter, pageSize: 50, orderBy: 'timestamp desc' });
        
        logger.info({ project: projectId, count: entries.length }, "Found log entries for project.");

        const logs = entries.map(entry => {
          const metadata = entry.metadata;
          let timestamp = new Date(metadata.timestamp as any).toISOString();
          const severity = metadata.severity ?? 'DEFAULT';
          let message = typeof entry.data === 'object' ? JSON.stringify(entry.data, null, 2) : String(entry.data);
          return `${timestamp} | ${severity} | ${message.trim()}`;
        }).join('\n');

        return { projectId, logs: logs || 'No recent logs found.' };
      } catch (err: any) {
        logger.error({ err, partialKey: keyJson.slice(0, 50) }, `Failed to process a GCP key.`);
        return { projectId: `Error processing a key`, logs: err.message };
      }
    });

    const results = await Promise.all(promises);
    return NextResponse.json({ projectLogs: results });

  } catch (error: any) {
    logger.error({ err: error }, 'Error in GCP log route.');
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\gemini\ask\route.ts ---
//file: app\api\gemini\ask\route.ts

import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

const MODEL = 'gemini-1.5-flash';

export async function POST(req: NextRequest) {
  const { question, context } = await req.json() as {
    question: string;
    context:  string;
  };

  if (!process.env.GEMINI_API_KEY) {
    return NextResponse.json({ error: 'GEMINI_API_KEY not set' }, { status: 500 });
  }

  try {
    /*  initialise model */
    const ai    = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    const model = ai.getGenerativeModel({ model: MODEL });

    /*  prompt (context already contains build summary + truncated logs) */
    const prompt =
      'You are an assistant analysing Jenkins console logs.\n' +
      'Answer strictly from the provided context. If you cannot, say "I donâ€™t see that in the logs."\n\n' +
      '### Context â†“â†“â†“\n' +
      context.slice(0, 25_000) +               // keep well under 32k tokens
      '\n\n### Question\n' +
      question;

    const r       = await model.generateContent(prompt);
    const answer  = r.response.candidates?.[0]?.content?.parts?.[0]?.text ?? 'No answer';

    return NextResponse.json({ answer });
  } catch (err: any) {
    console.error('Gemini error', err.message);
    return NextResponse.json({ error: 'Gemini request failed' }, { status: 500 });
  }
}


--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\jenkins\log\route.ts ---
// file: app/api/jenkins/log/route.ts

import { NextResponse } from 'next/server';
import { createClient } from 'redis';
import logger from '@/utils/logger';

const redis = createClient({ url: process.env.REDIS_URL });

async function ensureRedisConnection() {
  if (!redis.isOpen) {
    try {
      await redis.connect();
    } catch (err) {
      logger.error({ err }, 'Failed to connect to Redis.');
      throw new Error('Database connection failed.');
    }
  }
}

const SETTINGS_KEY = 'app_tool_configurations';

export async function GET() {
  try {
    await ensureRedisConnection();
    const settingsString = await redis.get(SETTINGS_KEY);
    
    if (!settingsString) {
      throw new Error('Tool settings not found in the database.');
    }
    
    const settings: any = JSON.parse(settingsString);
    const jenkinsConfig = settings.configs?.jenkins;

    const jobNamesStr = jenkinsConfig?.JENKINS_JOB_NAMES || jenkinsConfig?.JENKINS_JOB_NAME;

    if (!jenkinsConfig?.JENKINS_BASE_URL || !jobNamesStr) {
        throw new Error('Jenkins URL or Job Names are not configured in settings.');
    }

    const jobNames = jobNamesStr.split(',').map((name: string) => name.trim()).filter((name: string) => name);
    const authHeader = `Basic ${btoa(`${jenkinsConfig.JENKINS_USER}:${jenkinsConfig.JENKINS_API_TOKEN}`)}`;

    const allBuildsPromises = jobNames.map(async (jobName: string) => {
      const encodedJobName = encodeURIComponent(jobName);
      const jenkinsUrl = `${jenkinsConfig.JENKINS_BASE_URL}/job/${encodedJobName}/api/json?tree=builds[number,url]`;
      
      const res = await fetch(jenkinsUrl, { headers: { 'Authorization': authHeader } });
      if (!res.ok) {
        logger.warn(`Failed to fetch builds for job: ${jobName}`);
        return [];
      }
      const data = await res.json();
      return data.builds || [];
    });

    const allBuildsNested = await Promise.all(allBuildsPromises);
    const allBuilds = allBuildsNested.flat();

    const logPromises = allBuilds.slice(0, 15).map(async (build: any) => {
      const logRes = await fetch(`${build.url}consoleText`, { headers: { 'Authorization': authHeader } });
      const logText = await logRes.text();
      return { build: build.number, log: logText };
    });

    const logs = await Promise.all(logPromises);

    logger.info({ jobs: jobNames.length, builds: logs.length }, 'Successfully fetched Jenkins logs using settings from Redis.');
    return NextResponse.json({ logs });

  } catch (error: any) {
    logger.error({ err: error }, 'Error in Jenkins log route.');
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\settings\route.ts ---
// file: app/api/settings/route.ts

import { NextResponse } from 'next/server';
import { createClient } from 'redis';
import logger from '@/utils/logger';

// --- Redis Connection Setup ---
const redis = createClient({ url: process.env.REDIS_URL });

async function ensureRedisConnection() {
  if (!redis.isOpen) {
    try {
      await redis.connect();
      logger.info('Successfully connected to Redis for settings route.');
    } catch (err) {
      logger.error({ err }, 'Failed to connect to Redis.');
      throw new Error('Database connection failed.');
    }
  }
}

const SETTINGS_KEY = 'app_tool_configurations';
// -----------------------------

// --- GET Handler: Load settings from Redis ---
export async function GET() {
  try {
    await ensureRedisConnection();
    const settingsString = await redis.get(SETTINGS_KEY);
    
    // DEBUG: Log the raw data we are loading from the database
    logger.info({ loadedSettings: settingsString }, 'Data loaded from Redis:');

    if (!settingsString) {
      return NextResponse.json({ configs: {} });
    }

    const settings = JSON.parse(settingsString);
    return NextResponse.json(settings);

  } catch (error: any) {
    logger.error({ err: error }, 'Failed to load settings from Redis.');
    return NextResponse.json({ error: error.message || 'Could not load settings.' }, { status: 500 });
  }
}

// --- POST Handler: Save settings to Redis ---
export async function POST(request: Request) {
  try {
    await ensureRedisConnection();
    const body = await request.json();
    
    // DEBUG: Log the data we are about to save
    logger.info({ settingsToSave: body }, 'Data received to save to Redis:');

    await redis.set(SETTINGS_KEY, JSON.stringify(body));
    
    logger.info('Successfully saved settings to Redis.');
    return NextResponse.json({ message: 'Settings saved successfully!' });

  } catch (error: any) {
    logger.error({ err: error }, 'Failed to save settings to Redis.');
    return NextResponse.json({ error: error.message || 'Could not save settings.' }, { status: 500 });
  }
}


--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\sysdig\ping\route.ts ---
// file: app/api/datadog/ping/route.ts

import { NextResponse } from 'next/server';

// This is a placeholder PING endpoint.
// In a real application, you would add logic here to check
// the actual health of the Datadog service.
export async function GET() {
  try {
    // For now, we'll just simulate a successful connection.
    // TODO: Add real health check logic later.
    const isServiceUp = true;

    if (isServiceUp) {
      return NextResponse.json({ connected: true });
    } else {
      return NextResponse.json({ connected: false }, { status: 503 }); // Service Unavailable
    }

  } catch (error) {
    console.error("Ping failed for Datadog:", error);
    return NextResponse.json({ connected: false }, { status: 500 });
  }
}
--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\api\tool-status\route.ts ---
export async function GET() {
  const tools = [
    { name: "Datadog", isActive: !!process.env.NEXT_PUBLIC_DATADOG_API_KEY },
    { name: "Dynatrace", isActive: !!process.env.DYNATRACE_API_KEY },
    { name: "Sysdig", isActive: !!process.env.SYSDIG_API_KEY },
    { name: "AWS CloudWatch", isActive: !!process.env.AWS_ACCESS_KEY_ID },
    { name: "GCP Logs", isActive: !!process.env.GCP_CREDENTIALS_JSON },
  ];

  return Response.json(tools);
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\dashboard\DashboardClient.tsx ---
// file: app/dashboard/DashboardClient.tsx
'use client';

import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Switch } from '@/components/ui/switch';
import { Card, CardContent } from '@/components/ui/card';
import { Settings, LogOut } from 'lucide-react';
import clsx from 'clsx';
import ConsoleLogViewer from '@/components/ConsoleLogViewer';

// This component receives the pre-fetched vendor data as a prop
export default function DashboardClient({ vendors }: { vendors: any[] }) {
  const router = useRouter();

  const handleLogout = () => {
    router.push('/');
  };

  // Helper functions for styling remain the same
  const border = (r: number) => (r === 1 ? 'border-green-400' : r === 2 ? 'border-orange-400' : 'border-red-400');
  const text = (r: number) => (r === 1 ? 'text-green-400' : r === 2 ? 'text-orange-400' : 'text-red-400');
  const label = (r: number) => (r === 1 ? 'Connected' : r === 2 ? 'Disconnected' : 'Disabled');

  return (
    <div className="flex min-h-screen bg-gray-900 text-gray-100 font-sans">
      <style jsx global>{`
        @keyframes bob {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-6px); }
        }
        .bob-animation { animation: bob 3s ease-in-out infinite; }
      `}</style>
      
      <aside className="w-64 hidden md:flex flex-col bg-gray-800 border-r border-gray-700 p-4 space-y-6">
        <div className="flex items-center gap-3 px-2">
          <Image
            src="/intell_logo_1.png"
            alt="Observability Copilot Logo"
            width={40}
            height={40}
            className="rounded-full"
          />
          <span className="text-xl font-bold">Observability Copilot</span>
        </div>
        
        <nav className="flex flex-col space-y-2 text-sm pt-4 flex-grow">
          <Link href="/dashboard" className="font-semibold text-white bg-indigo-600/30 px-3 py-2 rounded-md">
            Observability Tools
          </Link>
          <Link href="/settings" className="text-gray-400 hover:bg-gray-700/50 hover:text-white px-3 py-2 rounded-md transition-colors">
            Settings
          </Link>
        </nav>
        
        <button
          onClick={handleLogout}
          className="w-full text-sm flex items-center space-x-2 cursor-pointer text-gray-400 hover:bg-red-500/20 hover:text-red-400 px-3 py-2 rounded-md transition-colors"
        >
          <LogOut size={16} />
          <span>Logout</span>
        </button>
      </aside>

      <main className="flex-1 px-6 py-8">
        <h1 className="text-3xl font-semibold tracking-tight mb-8">Observability Status</h1>

        {vendors.length > 0 ? (
          <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
            {vendors.map((v) => (
              <Link href={v.link} key={v.name} className="group">
                <Card
                  className={clsx(
                    'relative transition-transform duration-300 hover:scale-[1.02] rounded-2xl p-4 shadow-md hover:shadow-lg',
                    border(v.rank), 'bg-gray-800', 'flex flex-col h-full'
                  )}
                >
                  <CardContent className="flex flex-col items-center space-y-2 flex-grow">
                    <div className="flex h-28 flex-col items-center justify-center space-y-2">
                      <div className="w-14 h-14 relative">
                        <Image src={v.logo} alt={v.name} fill className="object-contain" sizes="56px" />
                      </div>
                      <h2 className="text-sm font-semibold tracking-wide text-center">{v.name}</h2>
                      {v.badge && (
                        <span className="text-[10px] font-bold bg-yellow-400 text-black px-2 py-0.5 rounded-full">{v.badge}</span>
                      )}
                    </div>
                    <div className="flex-grow"></div>
                    <Switch checked={v.rank === 1} disabled className="scale-90" />
                    <span className={clsx('text-xs font-medium uppercase tracking-wide', text(v.rank))}>{label(v.rank)}</span>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        ) : (
          <div className="text-center py-10">
            <p className="text-gray-400">No tools configured yet.</p>
            <Link href="/settings" className="mt-4 inline-block text-indigo-400 hover:text-indigo-300">
              Go to Settings to add a tool.
            </Link>
          </div>
        )}
      </main>
      
      <div className="group fixed bottom-6 right-6 z-50">
        <div className="relative flex items-center">
          <div className="absolute right-full mr-4 whitespace-nowrap bg-black text-white text-xs font-semibold px-3 py-1.5 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
            Click on a log card and ask questions
            <div className="absolute right-[-4px] top-1/2 -translate-y-1/2 w-2 h-2 bg-black rotate-45"></div>
          </div>
          <div className="w-16 h-16 rounded-full shadow-2xl bob-animation">
            <Image
              src="/chatbot.avif"
              alt="Chatbot"
              width={64}
              height={64}
              className="rounded-full object-cover"
              unoptimized
            />
          </div>
        </div>
      </div>
      
      <ConsoleLogViewer />
    </div>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\dashboard\page.tsx ---
// file: app/dashboard/page.tsx
import { createClient } from 'redis';
import { getVendorList } from '@/utils/envUtils';
import DashboardClient from './DashboardClient';
import logger from '@/utils/logger';

// This is now an async Server Component
export default async function DashboardPage() {
  
  // 1. Fetch all settings from the database on the server
  const redis = createClient({ url: process.env.REDIS_URL });
  await redis.connect();
  const settingsString = await redis.get('app_tool_configurations');
  await redis.disconnect();

  const settings: any = settingsString ? JSON.parse(settingsString as string) : { configs: {} };
  const savedConfigs = settings.configs || {};

  const allPossibleVendors = getVendorList();

  // 2. Map over all possible vendors to determine their status
  const vendorsToDisplay = allPossibleVendors
    .map((vendor) => {
      const isConfigured = !!savedConfigs[vendor.key];
      
      // If the tool is configured, we now assume it's connected (rank 1, green).
      // If not configured, it's disabled (rank 3, red).
      const rank = isConfigured ? 1 : 3; 

      return { ...vendor, rank };
    })
    // 3. Filter to only show configured tools, then sort
    .filter(vendor => savedConfigs[vendor.key])
    .sort((a, b) => a.rank - b.rank);

  // 4. Pass the pre-fetched data to a Client Component for rendering
  return <DashboardClient vendors={vendorsToDisplay} />;
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\logs\cloudwatch\page.tsx ---
// file: app/logs/cloudwatch/page.tsx
'use client';

import { useEffect, useState } from 'react';
import GeminiChatWidget from '@/components/GeminiChatWidget';
import LogPageTemplate from '@/components/LogPageTemplate';

type LogGroupData = {
  region: string;
  logGroupName: string;
  logs: string;
};

export default function AwsLogsPage() {
  const [logGroups, setLogGroups] = useState<LogGroupData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    document.documentElement.classList.add('dark');
    
    async function fetchAwsLogs() {
      try {
        const response = await fetch('/api/cloudwatch/log');
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch logs');
        }
        setLogGroups(data.logGroups || []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }

    fetchAwsLogs();
    
    return () => document.documentElement.classList.remove('dark');
  }, []);

  const combinedLogsForGemini = logGroups
    .map(lg => `--- Logs for ${lg.logGroupName} (Region: ${lg.region}) ---\n${lg.logs}`)
    .join('\n\n');

  return (
    <LogPageTemplate
      title="AWS CloudWatch Logs"
      iconSrc="/logos/cloudwatch.png"
      iconAlt="AWS CloudWatch Logo"
    >
      <div className="space-y-6">
        {loading && <p className="text-center py-10 text-gray-400">Loading AWS logsâ€¦</p>}
        {error && <p className="text-center py-10 text-red-400">Error: {error}</p>}
        
        {!loading && !error && logGroups.map((group) => (
          <section key={`${group.region}-${group.logGroupName}`} className="rounded-md border border-gray-700 bg-gray-800 shadow-sm">
            <header className="p-3 text-lg font-semibold text-amber-400 border-b border-gray-700 break-all">
              <span className="text-gray-400 text-sm block">Region: {group.region}</span>
              Log Group: {group.logGroupName}
            </header>
            
            <div className="p-3">
              <pre className="text-xs whitespace-pre-wrap overflow-x-auto max-h-[60vh] bg-gray-950 p-3 rounded-md text-gray-300">
                {group.logs}
              </pre>
            </div>
          </section>
        ))}

        {!loading && !error && logGroups.length === 0 && (
            <p className="text-center py-10 text-gray-400">No logs found for the configured groups.</p>
        )}
      </div>

      <GeminiChatWidget logs={combinedLogsForGemini} />
    </LogPageTemplate>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\logs\gcp\page.tsx ---
// file: app/logs/gcp/page.tsx
'use client';

import { useEffect, useState } from 'react';
import GeminiChatWidget from '@/components/GeminiChatWidget';
import LogPageTemplate from '@/components/LogPageTemplate';

type GcpProjectLogs = {
  projectId: string;
  logs: string;
};

export default function GcpLogsPage() {
  const [projectLogs, setProjectLogs] = useState<GcpProjectLogs[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    document.documentElement.classList.add('dark');
    
    async function fetchGcpLogs() {
      try {
        const response = await fetch('/api/gcp/log');
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to fetch logs');
        }
        setProjectLogs(data.projectLogs || []);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }

    fetchGcpLogs();
    
    return () => document.documentElement.classList.remove('dark');
  }, []);

  const combinedLogsForGemini = projectLogs
    .map(p => `--- Logs for GCP Project: ${p.projectId} ---\n${p.logs}`)
    .join('\n\n');

  return (
    <LogPageTemplate
      title="GCP Logs"
      iconSrc="/logos/gcp_logging.png"
      iconAlt="GCP Logs Logo"
    >
      <div className="space-y-6">
        {loading && <p className="text-center py-10 text-gray-400">Loading GCP logsâ€¦</p>}
        {error && <p className="text-center py-10 text-red-400">Error: {error}</p>}
        
        {!loading && !error && projectLogs.map((project) => (
          <section key={project.projectId} className="rounded-md border border-gray-700 bg-gray-800 shadow-sm">
            <header className="p-3 text-lg font-semibold text-amber-400 border-b border-gray-700">
              Project ID: {project.projectId}
            </header>
            
            <div className="p-3">
              <pre className="text-xs whitespace-pre-wrap overflow-x-auto max-h-[60vh] bg-gray-950 p-3 rounded-md text-gray-300">
                {project.logs}
              </pre>
            </div>
          </section>
        ))}
        
        {!loading && !error && projectLogs.length === 0 && (
          <p className="text-center py-10 text-gray-400">No logs found for the configured projects.</p>
        )}
      </div>

      <GeminiChatWidget logs={combinedLogsForGemini} />
    </LogPageTemplate>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\logs\jenkins\page.tsx ---
// file: app/logs/jenkins/page.tsx
'use client';

import { useEffect, useState } from 'react';
import GeminiChatWidget from '@/components/GeminiChatWidget';
import LogPageTemplate from '@/components/LogPageTemplate'; // ðŸ‘ˆ Import the template

type BuildLog = { build: number; log: string };

function makeContext(raw: BuildLog[]): string {
    const sorted = [...raw].sort((a, b) => b.build - a.build);
    const meta = sorted.map(({ build, log }) => {
        const status = /Finished:\s+SUCCESS/i.test(log) ? 'SUCCESS' : /Finished:\s+FAILURE/i.test(log) ? 'FAILURE' : 'UNKNOWN';
        return `#${build} ${status}`;
    }).join('\n');
    const truncatedLogs = sorted.map(({ build, log }) => `=== Build #${build} ===\n${log}`).join('\n\n').slice(0, 15_000);
    return `Jenkins Build Logs Summary:\nTotal Builds Provided: ${sorted.length}\nBuild Statuses Overview:\n${meta}\n\nâ”€â”€ Full Logs (newest first, truncated if very long) â”€â”€\n${truncatedLogs}`;
}

export default function JenkinsLogPage() {
  const [logs, setLogs] = useState<BuildLog[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    document.documentElement.classList.add('dark');
    (async () => {
      setLoading(true);
      try {
        const r = await fetch('/api/jenkins/log');
        const j = await r.json();
        if (!r.ok) throw new Error(j.error || 'Fetch failed with status: ' + r.status);
        setLogs(j.logs ?? []);
      } catch (e: any) {
        setError(e.message || 'An unknown error occurred');
      } finally {
        setLoading(false);
      }
    })();
    return () => { document.documentElement.classList.remove('dark'); };
  }, []);

  const contextForGemini = makeContext(logs);
  const getStatusForDisplay = (logContent: string): { text: string; color: string } => {
    if (/Finished:\s+SUCCESS/i.test(logContent)) return { text: 'SUCCESS', color: 'text-emerald-400' };
    if (/Finished:\s+FAILURE/i.test(logContent)) return { text: 'FAILURE', color: 'text-red-400' };
    return { text: 'UNKNOWN', color: 'text-yellow-400' };
  };

  return (
    <LogPageTemplate
      title="Jenkins Build Logs"
      iconSrc="/logos/jenkins.png"
      iconAlt="Jenkins Logo"
    >
      {/* The content below is passed as 'children' to the template */}
      <div className="space-y-4">
        {loading && <p className="text-center py-10 text-gray-400">Loading Jenkins logsâ€¦</p>}
        {error && <p className="text-center py-10 text-red-400">Error: {error}</p>}
        
        {!loading && !error && logs.map(({ build, log }) => {
          const buildStatus = getStatusForDisplay(log);
          return (
            <details key={build} className="border border-gray-700 rounded-lg bg-gray-800 shadow-lg overflow-hidden group" open={build === logs[0]?.build}>
              <summary className="p-4 cursor-pointer select-none flex justify-between items-center list-none group-open:border-b group-open:border-gray-700 hover:bg-gray-700/50 transition-colors">
                <div className="font-semibold text-lg text-amber-400">
                  Build&nbsp;<span className="font-mono text-yellow-300">#{build}</span>
                  <span className="ml-4 text-sm font-medium">
                    Status: <span className={buildStatus.color}>{buildStatus.text}</span>
                  </span>
                </div>
                <span className="text-gray-400 transition-transform transform group-open:rotate-90">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" /></svg>
                </span>
              </summary>
              <pre className="max-h-[30rem] overflow-y-auto overflow-x-auto whitespace-pre-wrap bg-gray-950 p-4 text-xs sm:text-sm text-gray-300">{log}</pre>
            </details>
          );
        })}
      </div>

      {!loading && !error && logs.length > 0 && <GeminiChatWidget logs={contextForGemini} />}
    </LogPageTemplate>
  );
}



// // file: app/logs/jenkins/page.tsx
// 'use client';

// import { useEffect, useState } from 'react';
// import Image from 'next/image';
// import Link from 'next/link'; // ðŸ‘ˆ Import Link
// import { ArrowLeft } from 'lucide-react'; // ðŸ‘ˆ Import Icon
// import GeminiChatWidget from '@/components/GeminiChatWidget';

// /* â”€â”€â”€ types â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
// type BuildLog = { build: number; log: string };

// /* ---------- helper to build Gemini context ---------- */
// function makeContext(raw: BuildLog[]): string {
//   const sorted = [...raw].sort((a, b) => b.build - a.build);

//   const meta = sorted
//     .map(({ build, log }) => {
//       const status =
//         /Finished:\s+SUCCESS/i.test(log)
//           ? 'SUCCESS'
//           : /Finished:\s+FAILURE/i.test(log)
//           ? 'FAILURE'
//           : 'UNKNOWN';
//       return `#${build} ${status}`;
//     })
//     .join('\n');

//   const truncatedLogs = sorted
//     .map(({ build, log }) => `=== Build #${build} ===\n${log}`)
//     .join('\n\n')
//     .slice(0, 15_000);

//   return `Jenkins Build Logs Summary:
// Total Builds Provided: ${sorted.length}
// Build Statuses Overview:
// ${meta}

// â”€â”€ Full Logs (newest first, truncated if very long) â”€â”€
// ${truncatedLogs}`;
// }
// /* ---------------------------------------------------- */

// export default function JenkinsLogPage() { // Renamed component for clarity
//   const [logs, setLogs] = useState<BuildLog[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);

//   useEffect(() => {
//     document.documentElement.classList.add('dark');
//     return () => {
//       document.documentElement.classList.remove('dark');
//     };
//   }, []);

//   useEffect(() => {
//     (async () => {
//       setLoading(true);
//       try {
//         const r = await fetch('/api/jenkins/log');
//         const j = await r.json();
//         if (!r.ok) throw new Error(j.error || 'Fetch failed with status: ' + r.status);
//         setLogs(j.logs ?? []);
//       } catch (e: any) {
//         setError(e.message || 'An unknown error occurred');
//       } finally {
//         setLoading(false);
//       }
//     })();
//   }, []);

//   const contextForGemini = makeContext(logs);

//   const getStatusForDisplay = (logContent: string): { text: string; color: string } => {
//     if (/Finished:\s+SUCCESS/i.test(logContent)) return { text: 'SUCCESS', color: 'text-emerald-400' };
//     if (/Finished:\s+FAILURE/i.test(logContent)) return { text: 'FAILURE', color: 'text-red-400' };
//     return { text: 'UNKNOWN', color: 'text-yellow-400' };
//   };

//   return (
//     // Set consistent background like the CloudWatch page
//     <main className="min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
//       <div className="max-w-5xl mx-auto space-y-6">
        
//         {/* */}
//         <div className="mb-2">
//             <Link href="/dashboard" className="flex items-center text-sm text-blue-400 hover:text-blue-300 transition-colors">
//                 <ArrowLeft size={16} className="mr-2" />
//                 Back to Dashboard
//             </Link>
//         </div>

//         {/* Header with Jenkins logo */}
//         <header className="flex items-center gap-4">
//           <Image
//             src="/logos/jenkins.png"
//             alt="Jenkins Logo"
//             width={60}
//             height={60}
//             className="rounded-md"
//           />
//           <div>
//             <h1 className="text-3xl sm:text-4xl font-bold text-blue-400">
//               Jenkins Build Logs
//             </h1>
//             <p className="mt-1 text-sm text-gray-400">
//               Review recent build outputs and analyze them with AI.
//             </p>
//           </div>
//         </header>

//         {/* Loading, Error, and Empty States */}
//         {loading && <p className="text-center py-10 text-gray-400">Loading Jenkins logsâ€¦</p>}
//         {error && <p className="text-center py-10 text-red-400">Error: {error}</p>}
//         {!loading && !error && logs.length === 0 && (
//           <p className="text-center py-10 text-gray-400">No logs available.</p>
//         )}

//         {/* Log Details Sections */}
//         {!loading && !error && logs.map(({ build, log }) => {
//           const buildStatus = getStatusForDisplay(log);
//           return (
//             <details
//               key={build}
//               className="border border-gray-700 rounded-lg bg-gray-800 shadow-lg overflow-hidden group"
//               open={build === logs[0]?.build} // Open the latest build by default
//             >
//               <summary className="p-4 cursor-pointer select-none flex justify-between items-center list-none group-open:border-b group-open:border-gray-700 hover:bg-gray-700/50 transition-colors">
//                 <div className="font-semibold text-lg text-amber-400">
//                   Build&nbsp;<span className="font-mono text-yellow-300">#{build}</span>
//                   <span className="ml-4 text-sm font-medium">
//                     Status: <span className={buildStatus.color}>{buildStatus.text}</span>
//                   </span>
//                 </div>
//                 <span className="text-gray-400 transition-transform transform group-open:rotate-90">
//                   <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
//                     <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
//                   </svg>
//                 </span>
//               </summary>
//               <pre className="max-h-[30rem] overflow-y-auto overflow-x-auto whitespace-pre-wrap bg-gray-950 p-4 text-xs sm:text-sm text-gray-300">
//                 {log}
//               </pre>
//             </details>
//           );
//         })}
//       </div>
      
//       {!loading && !error && logs.length > 0 && <GeminiChatWidget logs={contextForGemini} />}
//     </main>
//   );
// }


// // app/logs/jenkins/page.tsx (or your specific path for the "Details View" version)
// 'use client';

// import { useEffect, useState } from 'react';
// import Image from 'next/image'; // Import Next.js Image component
// import GeminiChatWidget from '@/components/GeminiChatWidget';

// /* â”€â”€â”€ types â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
// type BuildLog = { build: number; log: string };

// /* ---------- helper to build Gemini context ---------- */
// function makeContext(raw: BuildLog[]): string {
//   const sorted = [...raw].sort((a, b) => b.build - a.build);

//   const meta = sorted
//     .map(({ build, log }) => {
//       const status =
//         /Finished:\s+SUCCESS/i.test(log)
//           ? 'SUCCESS'
//           : /Finished:\s+FAILURE/i.test(log)
//           ? 'FAILURE'
//           : 'UNKNOWN';
//       return `#${build} ${status}`;
//     })
//     .join('\n');

//   const truncatedLogs = sorted
//     .map(({ build, log }) => `=== Build #${build} ===\n${log}`)
//     .join('\n\n')
//     .slice(0, 15_000);

//   return `Jenkins Build Logs Summary:
// Total Builds Provided: ${sorted.length}
// Build Statuses Overview:
// ${meta}

// â”€â”€ Full Logs (newest first, truncated if very long) â”€â”€
// ${truncatedLogs}`;
// }
// /* ---------------------------------------------------- */

// export default function JenkinsLogPageDetailsVersion() {
//   const [logs, setLogs] = useState<BuildLog[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string | null>(null);

//   useEffect(() => {
//     document.documentElement.classList.add('dark');
//     return () => {
//       document.documentElement.classList.remove('dark');
//     };
//   }, []);

//   useEffect(() => {
//     (async () => {
//       setLoading(true);
//       try {
//         const r = await fetch('/api/jenkins/log');
//         const j = await r.json();
//         if (!r.ok) throw new Error(j.error || 'Fetch failed with status: ' + r.status);
//         setLogs(j.logs ?? []);
//       } catch (e: any) {
//         setError(e.message || 'An unknown error occurred');
//       } finally {
//         setLoading(false);
//       }
//     })();
//   }, []);

//   const contextForGemini = makeContext(logs);

//   const getStatusForDisplay = (logContent: string): { text: string; color: string } => {
//     if (/Finished:\s+SUCCESS/i.test(logContent)) return { text: 'SUCCESS', color: 'text-emerald-400 dark:text-emerald-500' };
//     if (/Finished:\s+FAILURE/i.test(logContent)) return { text: 'FAILURE', color: 'text-red-400 dark:text-red-500' };
//     return { text: 'UNKNOWN', color: 'text-yellow-400 dark:text-yellow-500' };
//   };

//   return (
//     <main className="min-h-screen bg-black text-gray-200 py-8 px-4 sm:px-6 lg:px-8 font-sans">
//       {/* Updated header with Jenkins logo, no rocket, italic subtitle */}
//       <header className="max-w-5xl mx-auto mb-10 flex items-center gap-4">
//         <Image
//           src="/logos/jenkins.png" // Assumes jenkins.png is in your /public directory
//           alt="Jenkins Logo"
//           width={68} // Specify width (e.g., 48px)
//           height={68} // Specify height (e.g., 48px)
//           className="rounded-md" // Optional: if your logo benefits from it
//         />
//         <div>
//           <h1 className="text-3xl sm:text-4xl font-bold italic text-blue-400 dark:text-blue-500">
//             Jenkins Build Logs
//           </h1>
//           <p className="mt-1 text-sm text-gray-400 dark:text-gray-500 italic"> {/* Italic subtitle */}
//             Review recent build outputs and analyze them with AI.
//           </p>
//         </div>
//       </header>

//       <div className="max-w-5xl mx-auto space-y-6">
//         {loading && (
//           <div className="flex justify-center items-center py-10">
//             <p className="text-lg text-gray-400 dark:text-gray-500">Loading Jenkins logsâ€¦</p>
//           </div>
//         )}
//         {error && (
//           <div className="bg-red-800/30 border border-red-700 text-red-300 px-4 py-3 rounded-md" role="alert">
//             <strong className="font-bold">Error: </strong>
//             <span className="block sm:inline">{error}</span>
//           </div>
//         )}
//         {!loading && !error && logs.length === 0 && (
//           <div className="text-center py-10">
//             <p className="text-gray-400 dark:text-gray-500">No logs available at the moment.</p>
//           </div>
//         )}

//         {!loading && !error && logs.map(({ build, log }) => {
//           const buildStatus = getStatusForDisplay(log);
//           return (
//             <details
//               key={build}
//               className="border border-gray-700 dark:border-gray-800 rounded-lg bg-gray-900 dark:bg-slate-600 shadow-xl overflow-hidden group"
//               open={build === logs[0]?.build}
//             >
//               <summary className="p-4 cursor-pointer select-none flex justify-between items-center list-none group-open:border-b group-open:border-gray-700 dark:group-open:border-gray-800 hover:bg-gray-800 dark:hover:bg-slate-800 transition-colors">
//                 <div className="font-semibold text-lg text-amber-300 dark:text-amber-400">
//                   Build&nbsp;<span className="font-mono text-yellow-300 dark:text-yellow-400">#{build}</span>
//                   <span className="ml-3 text-sm font-medium">
//                     Status: <span className={buildStatus.color}>{buildStatus.text}</span>
//                   </span>
//                 </div>
//                 <span className="text-gray-400 dark:text-gray-500 transition-transform transform group-open:rotate-90">
//                   <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
//                     <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
//                   </svg>
//                 </span>
//               </summary>

//               <pre className="max-h-[30rem] overflow-y-auto overflow-x-auto whitespace-pre-wrap bg-black p-4 sm:p-5 text-xs sm:text-sm text-gray-300 dark:text-gray-400">
//                 {log}
//               </pre>
//             </details>
//           );
//         })}
//       </div>

//       {!loading && !error && logs.length > 0 && <GeminiChatWidget logs={contextForGemini} />}
//     </main>
//   );
// }

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\logs\[vendor]\page.tsx ---
// file: app/logs/[vendor]/page.tsx

import Link from 'next/link';
import { Construction } from 'lucide-react';

// This component receives `params`, which contains the dynamic part of the URL (e.g., "datadog").
export default function VendorComingSoonPage({ params }: { params: { vendor: string } }) {
  // Capitalize the vendor name from the URL for a nice title.
  const vendorName = params.vendor.charAt(0).toUpperCase() + params.vendor.slice(1);

  return (
    <main className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
      <div className="text-center space-y-6 bg-gray-800 p-10 rounded-2xl border border-gray-700 shadow-xl max-w-md">
        <Construction className="mx-auto text-yellow-400" size={56} strokeWidth={1.5} />
        <h1 className="text-4xl font-bold text-white">
          {vendorName} Integration
        </h1>
        <p className="text-lg text-gray-400">
          This page is under construction and will be available soon.
        </p>
        <Link
          href="/dashboard"
          className="inline-block mt-4 px-6 py-3 text-base font-medium rounded-lg shadow-md transition-colors duration-150 ease-in-out bg-indigo-600 hover:bg-indigo-500 text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          &larr; Back to Dashboard
        </Link>
      </div>
    </main>
  );
}
--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\settings\page.tsx ---
// file: app/settings/page.tsx
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { TOOL_CONFIGS } from '@/constants/tools';
import SettingsPageLayout from '@/components/SettingsPageLayout'; // Import the new layout

export default function SettingsDashboardPage() {
  return (
    <SettingsPageLayout
      title="Tool Integrations & Settings"
      description="Select a tool to configure its settings and credentials."
    >
      <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
        {TOOL_CONFIGS.map((tool) => (
          <Link
            href={`/settings/${tool.key}`}
            key={tool.key}
            className="group block rounded-2xl border border-gray-700 bg-gray-800 p-6 shadow-lg transition-all duration-300 hover:border-indigo-500 hover:scale-105 hover:bg-gray-700/50"
          >
            <div className="flex flex-col items-center text-center">
              <Image
                src={tool.logo}
                alt={`${tool.name} Logo`}
                width={56}
                height={56}
                className="object-contain"
              />
              <h2 className="mt-4 font-semibold text-white">{tool.name}</h2>
              <p className="mt-1 text-xs text-gray-400">{tool.description}</p>
            </div>
          </Link>
        ))}
      </div>
    </SettingsPageLayout>
  );
}


// // file: app/settings/page.tsx
// 'use client';

// import Link from 'next/link';
// import Image from 'next/image';
// import { TOOL_CONFIGS } from '@/constants/tools';
// import SettingsPageLayout from '@/components/SettingsPageLayout'; // Import the new layout

// export default function SettingsDashboardPage() {
//   return (
//     <SettingsPageLayout
//       title="Tool Integrations & Settings"
//       description="Select a tool to configure its settings and credentials."
//     >
//       <div className="grid gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
//         {TOOL_CONFIGS.map((tool) => (
//           <Link
//             href={`/settings/${tool.key}`}
//             key={tool.key}
//             className="group block rounded-2xl border border-gray-700 bg-gray-800 p-6 shadow-lg transition-all duration-300 hover:border-indigo-500 hover:scale-105 hover:bg-gray-700/50"
//           >
//             <div className="flex flex-col items-center text-center">
//               <Image
//                 src={tool.logo}
//                 alt={`${tool.name} Logo`}
//                 width={56}
//                 height={56}
//                 className="object-contain"
//               />
//               <h2 className="mt-4 font-semibold text-white">{tool.name}</h2>
//               <p className="mt-1 text-xs text-gray-400">{tool.description}</p>
//             </div>
//           </Link>
//         ))}
//       </div>
//     </SettingsPageLayout>
//   );
// }

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\settings\gcp\page.tsx ---
// file: app/settings/gcp/page.tsx
'use client';

import { useEffect, useState, FormEvent } from 'react';
import { TOOL_CONFIGS } from '@/constants/tools';
import Link from 'next/link';
import { ArrowLeft, Save, PlusCircle, XCircle } from 'lucide-react';

export default function GcpSettingsPage() {
  const toolConfig = TOOL_CONFIGS.find(t => t.key === 'gcp');

  // State now holds an array of JSON key strings
  const [projectKeys, setProjectKeys] = useState<string[]>(['']);
  const [saveStatus, setSaveStatus] = useState<{ message: string; type: 'success' | 'error' } | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // Load settings from the API
  useEffect(() => {
    async function loadSettings() {
      try {
        const res = await fetch('/api/settings');
        if (!res.ok) throw new Error('Failed to fetch settings');
        const data = await res.json();
        const gcpConfigs = data.configs?.gcp?.GCP_PROJECT_KEYS_JSON;
        if (gcpConfigs && Array.isArray(gcpConfigs) && gcpConfigs.length > 0) {
          setProjectKeys(gcpConfigs);
        }
      } catch (error) {
        console.error("Failed to load settings:", error);
      } finally {
        setIsLoading(false);
      }
    }
    loadSettings();
  }, []);

  const handleKeyChange = (index: number, value: string) => {
    const newKeys = [...projectKeys];
    newKeys[index] = value;
    setProjectKeys(newKeys);
    setSaveStatus(null);
  };

  const addProject = () => {
    setProjectKeys([...projectKeys, '']);
  };

  const removeProject = (index: number) => {
    const newKeys = projectKeys.filter((_, i) => i !== index);
    setProjectKeys(newKeys);
  };

  const handleSave = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSaveStatus({ message: 'Saving...', type: 'success' });
    
    // Filter out any empty text areas before saving
    const validKeys = projectKeys.filter(key => key.trim() !== '');

    try {
      const res = await fetch('/api/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          configs: { 
            gcp: { GCP_PROJECT_KEYS_JSON: validKeys } 
          } 
        }),
      });
      const result = await res.json();
      if (!res.ok) throw new Error(result.error || 'Failed to save');
      setSaveStatus({ message: result.message, type: 'success' });
    } catch (error: any) {
      setSaveStatus({ message: error.message, type: 'error' });
    }
    setTimeout(() => setSaveStatus(null), 3000);
  };

  if (!toolConfig) return <div>Tool not found.</div>;

  return (
    <main className="min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
      <div className="max-w-2xl mx-auto">
        <div className="mb-8">
          <Link href="/settings" className="flex items-center text-sm text-blue-400 hover:text-blue-300 transition-colors">
            <ArrowLeft size={16} className="mr-2" />
            Back to All Settings
          </Link>
          <h1 className="text-3xl sm:text-4xl font-bold text-white mt-2">{toolConfig.name} Settings</h1>
          <p className="mt-2 text-gray-400">{toolConfig.description}</p>
        </div>

        {isLoading ? <p>Loading...</p> : (
          <form onSubmit={handleSave} className="space-y-6 bg-gray-800 p-8 rounded-2xl border border-gray-700">
            {projectKeys.map((key, index) => (
              <div key={index} className="space-y-2 relative group">
                <label className="block text-sm font-medium text-gray-300">
                  Project {index + 1} - Service Account JSON
                </label>
                <textarea
                  value={key}
                  onChange={(e) => handleKeyChange(index, e.target.value)}
                  placeholder="Paste the entire content of your service account key file here..."
                  className="w-full h-32 pl-4 pr-10 py-2.5 bg-slate-900 border border-slate-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all font-mono text-xs"
                />
                {projectKeys.length > 1 && (
                  <button
                    type="button"
                    onClick={() => removeProject(index)}
                    className="absolute top-0 right-0 mt-1 mr-1 p-1 text-gray-500 hover:text-red-400 rounded-full opacity-50 group-hover:opacity-100 transition-opacity"
                    aria-label="Remove Project"
                  >
                    <XCircle size={18} />
                  </button>
                )}
              </div>
            ))}
            
            <button
              type="button"
              onClick={addProject}
              className="flex items-center gap-2 text-sm text-indigo-400 hover:text-indigo-300"
            >
              <PlusCircle size={16} />
              Add Another Project
            </button>

            <footer className="flex items-center justify-end pt-6 border-t border-gray-700 gap-4">
              {saveStatus && <div className={`text-sm ${saveStatus.type === 'success' ? 'text-green-400' : 'text-red-400'}`}>{saveStatus.message}</div>}
              <button
                type="submit"
                className="flex items-center gap-2 px-6 py-2.5 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700"
              >
                <Save size={16} />
                Save GCP Settings
              </button>
            </footer>
          </form>
        )}
      </div>
    </main>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\app\settings\[tool]\page.tsx ---
// file: app/settings/[tool]/page.tsx
'use client';

import { useEffect, useState, FormEvent } from 'react';
import { useParams } from 'next/navigation';
import { TOOL_CONFIGS } from '@/constants/tools';
import { Save } from 'lucide-react';
import SettingsPageLayout from '@/components/SettingsPageLayout'; // Import the new layout

type AllConfigs = Record<string, Record<string, string>>;

export default function ToolSettingsPage() {
  const params = useParams();
  const toolKey = typeof params?.tool === 'string' ? params.tool : '';
  const toolConfig = TOOL_CONFIGS.find(t => t.key === toolKey);

  const [formState, setFormState] = useState<Record<string, string>>({});
  const [allConfigs, setAllConfigs] = useState<AllConfigs>({});
  const [saveStatus, setSaveStatus] = useState<{ message: string; type: 'success' | 'error' } | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function loadSettings() {
      try {
        const res = await fetch('/api/settings');
        if (!res.ok) throw new Error('Failed to fetch settings');
        const data = await res.json();
        const fullConfigs = data.configs || {};
        setAllConfigs(fullConfigs);
        if (toolKey && fullConfigs[toolKey]) {
          setFormState(fullConfigs[toolKey]);
        }
      } catch (error) {
        console.error("Failed to load settings from API", error);
      } finally {
        setIsLoading(false);
      }
    }
    if (toolKey) loadSettings();
  }, [toolKey]);

  const handleFieldChange = (fieldKey: string, value: string) => {
    setFormState(prev => ({ ...prev, [fieldKey]: value }));
    setSaveStatus(null);
  };

  const handleSave = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSaveStatus({ message: 'Saving...', type: 'success' });
    const newConfigsToSave = { ...allConfigs, [toolKey]: formState };
    try {
      const res = await fetch('/api/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ configs: newConfigsToSave }),
      });
      const result = await res.json();
      if (!res.ok) throw new Error(result.error || 'Failed to save');
      setSaveStatus({ message: result.message, type: 'success' });
    } catch (error: any) {
      setSaveStatus({ message: error.message, type: 'error' });
    }
    setTimeout(() => setSaveStatus(null), 3000);
  };

  if (!toolConfig) {
    return (
      <SettingsPageLayout
        title="Error"
        description="Tool configuration not found."
      />
    );
  }

  return (
    <SettingsPageLayout
      title={`${toolConfig.name} Settings`}
      description={toolConfig.description}
      iconSrc={toolConfig.logo}
      backLink={{ href: '/settings', text: 'Back to All Settings' }}
    >
      {isLoading ? <p className="text-center py-10">Loading settings...</p> : (
        <form onSubmit={handleSave} className="space-y-6 bg-gray-800 p-8 rounded-2xl border border-gray-700">
          {toolConfig.fields.map(field => (
            <div key={field.key}>
              <label htmlFor={field.key} className="block text-sm font-medium text-gray-300 mb-2">
                {field.label}
              </label>
              <input
                id={field.key}
                type="text"
                value={formState[field.key] || ''}
                onChange={(e) => handleFieldChange(field.key, e.target.value)}
                placeholder={field.placeholder}
                className="w-full pl-4 pr-4 py-2.5 bg-slate-900 border border-slate-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all"
              />
            </div>
          ))}
          <footer className="flex items-center justify-end pt-6 border-t border-gray-700 gap-4">
            {saveStatus && <div className={`text-sm ${saveStatus.type === 'success' ? 'text-green-400' : 'text-red-400'}`}>{saveStatus.message}</div>}
            <button
              type="submit"
              className="flex items-center gap-2 px-6 py-2.5 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700"
            >
              <Save size={16} />
              Save Changes
            </button>
          </footer>
        </form>
      )}
    </SettingsPageLayout>
  );
}


--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\AskGemini.tsx ---
'use client';

import { useRef, useState, useEffect } from 'react';
import { User, Bot, Loader2 } from 'lucide-react';
import clsx from 'clsx';
import Markdown from 'react-markdown';

interface Props {
  logs: string;
}

type Message = {
  role: 'user' | 'model';
  content: string;
};

export default function AskGemini({ logs }: Props) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [pending, setPending] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages, pending]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const q = input.trim();
    if (!q || pending) return;

    const userMessage: Message = { role: 'user', content: q };
    setMessages((prev) => [...prev, userMessage]);
    setPending(true);
    setInput('');

    try {
      const res = await fetch('/api/gemini/ask', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: q, context: logs }),
      });
      const { answer = 'No answer', error } = await res.json();
      
      const modelMessage: Message = { role: 'model', content: error ?? answer };
      setMessages((prev) => [...prev, modelMessage]);

    } catch (err: any) {
      const errorMessage: Message = { role: 'model', content: `Error: ${err.message}` };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setPending(false);
    }
  };

  const MessageBubble = ({ msg }: { msg: Message }) => {
    const isUser = msg.role === 'user';
    return (
      <div className={clsx("flex items-start gap-3 my-4", isUser && "justify-end")}>
        {msg.role === 'model' && (
          <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center">
            <Bot size={18} className="text-white" />
          </div>
        )}
        
        {/* ðŸ‘‡ This is the corrected part */}
        <div className={clsx(
          "max-w-[85%] rounded-2xl px-4 py-2 text-sm",
          isUser ? "bg-blue-600 text-white" : "bg-gray-700 text-gray-200"
        )}>
          {/* Apply styling to the wrapper div, not the Markdown component */}
          <div className="prose prose-sm prose-invert">
            <Markdown>{msg.content}</Markdown>
          </div>
        </div>

        {msg.role === 'user' && (
          <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center">
            <User size={18} className="text-white" />
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full text-gray-200">
      <div ref={chatContainerRef} className="flex-grow space-y-4 overflow-y-auto pr-2">
        {messages.map((msg, i) => <MessageBubble key={i} msg={msg} />)}
        {pending && (
           <div className="flex items-start gap-3">
             <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center">
               <Bot size={18} className="text-white" />
             </div>
             <div className="bg-gray-700 rounded-2xl px-4 py-2 text-sm flex items-center gap-2">
               <Loader2 size={16} className="animate-spin text-gray-400" />
               <span className="text-gray-400">Thinking...</span>
             </div>
           </div>
        )}
      </div>

      <form onSubmit={handleSubmit} className="flex items-center gap-2 pt-4 mt-4 border-t border-white/10">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 bg-gray-700 text-white rounded-lg p-2 text-sm border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          placeholder="Ask about the logsâ€¦"
          disabled={pending}
        />
        <button
          type="submit"
          disabled={pending}
          className="bg-indigo-600 text-white font-semibold rounded-lg px-4 py-2 text-sm hover:bg-indigo-500 disabled:bg-gray-500 disabled:cursor-not-allowed transition-colors"
        >
          Ask
        </button>
      </form>
    </div>
  );
}




// //file: components\AskGemini.tsx
// 'use client';
// import { useRef, useState } from 'react';

// interface Props { logs: string }

// export default function AskGemini({ logs }: Props) {
//   const [chat, setChat] = useState<{ q: string; a: string }[]>([]);
//   const [pending, setPending] = useState(false);
//   const inputRef = useRef<HTMLInputElement>(null);

//   const send = async () => {
//     const q = inputRef.current?.value.trim();
//     if (!q) return;

//     setPending(true);
//     try {
//       const res = await fetch('/api/gemini/ask', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ question: q, context: logs }),
//       });
//       const { answer = 'No answer', error } = await res.json();
//       setChat((c) => [...c, { q, a: error ?? answer }]);
//     } finally {
//       setPending(false);
//       if (inputRef.current) inputRef.current.value = '';
//     }
//   };

//   return (
//     <div className="flex flex-col gap-3 text-black dark:text-black">
//       <div className="space-y-2 max-h-[330px] overflow-y-auto pr-1">
//         {chat.map(({ q, a }, i) => (
//           <div key={i}>
//             <p className="text-right text-blue-600 text-sm">{q}</p>
//             <pre className="text-sm whitespace-pre-wrap">{a}</pre>
//           </div>
//         ))}
//       </div>

//       <div className="flex gap-2">
//         <input
//           ref={inputRef}
//           className="flex-1 border px-2 py-1 rounded text-sm text-black"
//           placeholder="Ask about the logsâ€¦"
//           disabled={pending}
//           onKeyDown={(e) => e.key === 'Enter' && send()}
//         />
//         <button
//           onClick={send}
//           disabled={pending}
//           className="bg-indigo-600 text-black px-3 py-1 rounded text-sm disabled:opacity-50"
//         >
//           {pending ? '...' : 'Ask'}
//         </button>
//       </div>
//     </div>
//   );
// }




--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\ConsoleLogViewer.tsx ---
// file: components/ConsoleLogViewer.tsx
'use client';

import { useState, useEffect, useCallback } from 'react';
import { TerminalSquare, X, Trash2 } from 'lucide-react';
import clsx from 'clsx';

type LogEntry = {
  type: 'log' | 'warn' | 'error';
  timestamp: string;
  message: string;
};

export default function ConsoleLogViewer() {
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [isOpen, setIsOpen] = useState(false);

  const captureLog = useCallback((type: LogEntry['type']) => {
    const originalLogMethod = console[type];
    console[type] = (...args) => {
      originalLogMethod.apply(console, args);
      setTimeout(() => {
        setLogs(prevLogs => [
          ...prevLogs,
          {
            type,
            timestamp: new Date().toLocaleTimeString(),
            message: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : arg).join(' '),
          },
        ]);
      }, 0);
    };
    return originalLogMethod;
  }, []);

  useEffect(() => {
    const original = {
      log: captureLog('log'),
      warn: captureLog('warn'),
      error: captureLog('error'),
    };
    return () => {
      console.log = original.log;
      console.warn = original.warn;
      console.error = original.error;
    };
  }, [captureLog]);

  const clearLogs = () => setLogs([]);

  const logColors = {
    log: 'text-gray-300',
    warn: 'text-yellow-400',
    error: 'text-red-400',
  };

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 left-4 z-50 p-3 bg-gray-800 border border-gray-700 rounded-full shadow-lg hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors"
        aria-label="Open Console Logs"
      >
        <TerminalSquare size={24} className="text-white" />
      </button>

      {isOpen && (
        <div className="fixed inset-0 z-[60] bg-black/60 backdrop-blur-sm flex items-end">
          <div className="w-full h-2/3 bg-gray-900 border-t-2 border-indigo-500 rounded-t-lg shadow-2xl flex flex-col">
            <header className="flex items-center justify-between p-3 border-b border-gray-700 bg-gray-800">
              <div className="flex items-center gap-2 font-semibold">
                <TerminalSquare size={20} className="text-indigo-400" />
                UI Console Logs
              </div>
              <div className="flex items-center gap-2">
                <button onClick={clearLogs} className="p-1 text-gray-400 hover:text-white" aria-label="Clear logs">
                  <Trash2 size={18} />
                </button>
                <button onClick={() => setIsOpen(false)} className="p-1 text-gray-400 hover:text-white" aria-label="Close logs">
                  <X size={20} />
                </button>
              </div>
            </header>
            <div className="flex-grow p-3 overflow-y-auto font-mono text-sm">
              {logs.length === 0 ? (
                <p className="text-gray-500">No logs captured yet.</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className={clsx("flex gap-4 border-b border-gray-800 py-1", logColors[log.type])}>
                    <span className="text-gray-500">{log.timestamp}</span>
                    <span className="flex-grow">{log.message}</span>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      )}
    </>
  );
}
--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\GeminiChatWidget.tsx ---
// file: components/GeminiChatWidget.tsx
'use client';

import { useEffect, useRef, useState } from 'react';
import Image from 'next/image';
import { X, User, Bot, Loader2 } from 'lucide-react';
import clsx from 'clsx';
import Markdown from 'react-markdown';

// Define types directly in the component
interface Props {
  logs: string | Record<string, string>;
  enableDropdown?: boolean;
}

type Message = {
  role: 'user' | 'model';
  content: string;
};

export default function GeminiChatWidget({ logs, enableDropdown = false }: Props) {
  // --- State from GeminiChatWidget ---
  const [isOpen, setIsOpen] = useState(false);
  
  // --- State from AskGemini ---
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [pending, setPending] = useState(false);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Logic to handle log source selection (if dropdown is enabled)
  const logSources = logs && typeof logs === 'object' && !Array.isArray(logs) ? Object.keys(logs) : ['Logs'];
  const [selectedLogSource, setSelectedLogSource] = useState(logSources[0]);
  
  const currentLogs = typeof logs === 'string' ? logs : logs[selectedLogSource] ?? '';

  // Auto-scroll to bottom on new message
  useEffect(() => {
    if (isOpen && chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages, pending, isOpen]);

  // Handle form submission to Gemini API
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const q = input.trim();
    if (!q || pending) return;

    const userMessage: Message = { role: 'user', content: q };
    setMessages((prev) => [...prev, userMessage]);
    setPending(true);
    setInput('');

    try {
      const res = await fetch('/api/gemini/ask', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: q, context: currentLogs }),
      });
      const { answer = 'No answer', error } = await res.json();
      const modelMessage: Message = { role: 'model', content: error ?? answer };
      setMessages((prev) => [...prev, modelMessage]);
    } catch (err: any) {
      const errorMessage: Message = { role: 'model', content: `Error: ${err.message}` };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setPending(false);
    }
  };

  return (
    <>
      <style jsx global>{`
        @keyframes bob {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-6px); }
        }
        .bob-animation { animation: bob 3s ease-in-out infinite; }
      `}</style>

      {/* Floating Button */}
      <button
        onClick={() => setIsOpen((o) => !o)}
        className={clsx(
          "fixed bottom-6 right-6 z-50 rounded-full shadow-2xl transition-all duration-300 ease-in-out",
          "hover:scale-110 focus:outline-none focus:ring-4 focus:ring-purple-500/50",
          !isOpen && "bob-animation"
        )}
        aria-label="Toggle Gemini Chat"
      >
        {isOpen ? (
          <div className="flex h-16 w-16 items-center justify-center rounded-full bg-gray-700 text-white">
            <X size={28} />
          </div>
        ) : (
          <Image
            src="/chatbot.avif"
            alt="Gemini Chatbot"
            width={64}
            height={64}
            className="rounded-full object-cover"
            unoptimized
          />
        )}
      </button>

      {/* Chat Box */}
      {isOpen && (
        <div
          className={clsx(
            'fixed bottom-24 right-6 z-50 w-[380px] max-h-[600px] rounded-2xl shadow-2xl flex flex-col',
            'bg-gray-800/80 backdrop-blur-lg border border-white/10'
          )}
        >
          {/* Header */}
          <header className="flex items-center justify-between p-3 border-b border-white/10 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-t-2xl">
            <span className="text-md font-bold text-white">Ask Gemini</span>
            {enableDropdown && (
              <select
                value={selectedLogSource}
                onChange={(e) => setSelectedLogSource(e.target.value)}
                className="text-xs bg-white/10 text-white px-2 py-1 rounded-md border border-white/20 focus:outline-none focus:ring-2 focus:ring-white"
              >
                {logSources.map((t) => (
                  <option key={t} className="bg-gray-800">{t}</option>
                ))}
              </select>
            )}
          </header>

          {/* Chat Body */}
          <div ref={chatContainerRef} className="flex-1 overflow-y-auto p-4 text-gray-200 space-y-4">
            {messages.map((msg, i) => (
              <div key={i} className={clsx("flex items-start gap-3", msg.role === 'user' && "justify-end")}>
                {msg.role === 'model' && (
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center">
                    <Bot size={18} className="text-white" />
                  </div>
                )}
                <div className={clsx("max-w-[85%] rounded-2xl px-4 py-2 text-sm", msg.role === 'user' ? "bg-blue-600 text-white" : "bg-gray-700 text-gray-200")}>
                  <div className="prose prose-sm prose-invert"><Markdown>{msg.content}</Markdown></div>
                </div>
                {msg.role === 'user' && (
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center">
                    <User size={18} className="text-white" />
                  </div>
                )}
              </div>
            ))}
            {pending && (
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center"><Bot size={18} className="text-white" /></div>
                <div className="bg-gray-700 rounded-2xl px-4 py-2 text-sm flex items-center gap-2">
                  <Loader2 size={16} className="animate-spin text-gray-400" />
                  <span className="text-gray-400">Thinking...</span>
                </div>
              </div>
            )}
          </div>

          {/* Input Form */}
          <form onSubmit={handleSubmit} className="flex items-center gap-2 p-4 border-t border-white/10">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              className="flex-1 bg-gray-700 text-white rounded-lg p-2 text-sm border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="Ask about the logsâ€¦"
              disabled={pending}
            />
            <button
              type="submit"
              disabled={pending}
              className="bg-indigo-600 text-white font-semibold rounded-lg px-4 py-2 text-sm hover:bg-indigo-500 disabled:bg-gray-500 disabled:cursor-not-allowed transition-colors"
            >
              Ask
            </button>
          </form>
        </div>
      )}
    </>
  );
}



// // file: components/GeminiChatWidget.tsx
// 'use client';

// import { useEffect, useRef, useState } from 'react';
// import Image from 'next/image';
// import { X } from 'lucide-react';
// import AskGemini from './AskGemini';
// import clsx from 'clsx';

// interface Props {
//   logs: string | Record<string, string>;
//   enableDropdown?: boolean;
// }

// export default function GeminiChatWidget({ logs, enableDropdown = false }: Props) {
//   // --- All existing functionality remains unchanged ---
//   const tools =
//     logs && typeof logs === 'object' && !Array.isArray(logs)
//       ? Object.keys(logs)
//       : ['Logs'];
//   if (!logs) {
//     console.warn('GeminiChatWidget: "logs" prop is undefined or null.');
//   }

//   const [tool, setTool] = useState(tools[0]);
//   const [open, setOpen] = useState(false);
//   const boxRef = useRef<HTMLDivElement>(null);

//   useEffect(() => {
//     if (open && boxRef.current) {
//       boxRef.current.scrollTop = boxRef.current.scrollHeight;
//     }
//   });

//   return (
//     <>
//       {/* Add custom animation styles */}
//       <style jsx global>{`
//         @keyframes bob {
//           0%, 100% {
//             transform: translateY(0);
//           }
//           50% {
//             transform: translateY(-6px);
//           }
//         }
//         .bob-animation {
//           animation: bob 3s ease-in-out infinite;
//         }
//       `}</style>

//       {/* --- Revamped Floating Button --- */}
//       <button
//         onClick={() => setOpen((o) => !o)}
//         className={clsx(
//           "fixed bottom-6 right-6 z-50 rounded-full shadow-2xl transition-all duration-300 ease-in-out",
//           "hover:scale-110 focus:outline-none focus:ring-4 focus:ring-purple-500/50",
//           !open && "bob-animation" // Apply bobbing animation only when closed
//         )}
//         aria-label="Toggle Gemini Chat"
//       >
//         {open ? (
//           <div className="flex h-16 w-16 items-center justify-center rounded-full bg-gray-700 text-white">
//             <X size={28} />
//           </div>
//         ) : (
//           <Image
//             src="/chatbot.avif" // Assumes your image is at public/chatbot.avif
//             alt="Gemini Chatbot"
//             width={64} // 4rem
//             height={64} // 4rem
//             className="rounded-full object-cover"
//             unoptimized // Use this if your AVIF is already animated
//           />
//         )}
//       </button>

//       {/* --- Revamped Chat Box --- */}
//       {open && (
//         <div
//           className={clsx(
//             'fixed bottom-24 right-6 z-50 w-[380px] max-h-[600px] rounded-2xl shadow-2xl flex flex-col',
//             'bg-gray-800/80 backdrop-blur-lg border border-white/10'
//           )}
//         >
//           {/* Header */}
//           <header className="flex items-center justify-between p-3 border-b border-white/10 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-t-2xl">
//             <span className="text-md font-bold text-white">Ask Gemini</span>
            
//             {enableDropdown && (
//               <select
//                 value={tool}
//                 onChange={(e) => setTool(e.target.value)}
//                 className="text-xs bg-white/10 text-white px-2 py-1 rounded-md border border-white/20 focus:outline-none focus:ring-2 focus:ring-white"
//               >
//                 {tools.map((t) => (
//                   <option key={t} className="bg-gray-800">{t}</option>
//                 ))}
//               </select>
//             )}
//           </header>

//           {/* AskGemini Body */}
//           {/* ðŸ‘‡ Added 'text-gray-200' to set a light default text color */}
//           <div ref={boxRef} className="flex-1 overflow-y-auto p-4 text-white">
//             <AskGemini
//               logs={typeof logs === 'string' ? logs : logs[tool] ?? ''}
//             />
//           </div>
//         </div>
//       )}
//     </>
//   );
// }

// // // components/GeminiChatWidget.tsx
// // 'use client';

// // import { useEffect, useRef, useState } from 'react';
// // import { MessageSquare, X } from 'lucide-react';
// // import AskGemini from './AskGemini';
// // import clsx from 'clsx';

// // interface Props {
// //   logs: string | Record<string, string>; // single string OR {tool: logs}
// //   enableDropdown?: boolean;              // true on dashboard
// // }

// // export default function GeminiChatWidget({ logs, enableDropdown = false }: Props) {
// //   // if logs is object => dropdown; if string => fixed context
// //   //const tools = typeof logs === 'string' ? ['Logs'] : Object.keys(logs);
// //   const tools =
// //   logs && typeof logs === 'object' && !Array.isArray(logs)
// //     ? Object.keys(logs)
// //     : ['Logs'];
// //     if (!logs) {
// //   console.warn('GeminiChatWidget: "logs" prop is undefined or null.');
// // }


// //   const [tool, setTool] = useState(tools[0]);
// //   const [open, setOpen] = useState(false);
// //   const boxRef = useRef<HTMLDivElement>(null);

// //   // scroll to bottom on new answer
// //   useEffect(() => {
// //     if (boxRef.current) boxRef.current.scrollTop = boxRef.current.scrollHeight;
// //   });

// //   return (
// //     <>
// //       {/* Floating icon */}
// //       <button
// //         onClick={() => setOpen((o) => !o)}
// //         className="fixed bottom-6 right-6 z-50 p-3 rounded-full bg-indigo-600 text-black shadow-lg hover:scale-110 transition"
// //         aria-label="Gemini chat"
// //       >
// //         {open ? <X size={18} /> : <MessageSquare size={20} />}
// //       </button>

// //       {/* Chat box */}
// //       {open && (
// //         <div
// //           className={clsx(
// //             'fixed bottom-24 right-6 z-50 w-[350px] max-h-[520px] bg-background border rounded-xl shadow-lg flex flex-col',
// //             'dark:bg-muted bg-white text-foreground'
// //           )}
// //         >
// //           {/* Header */}
// //           <div className="flex items-center justify-between p-2 border-b bg-indigo-100 dark:bg-indigo-900">
// //             <span className="text-sm font-semibold">Ask&nbsp;Gemini</span>

// //             {enableDropdown && (
// //               <select
// //                 value={tool}
// //                 onChange={(e) => setTool(e.target.value)}
// //                 className="text-xs bg-muted px-1 py-0.5 rounded"
// //               >
// //                 {tools.map((t) => (
// //                   <option key={t}>{t}</option>
// //                 ))}
// //               </select>
// //             )}

// //             <button
// //               onClick={() => setOpen(false)}
// //               className="text-xs text-red-500 hover:underline ml-2"
// //             >
// //               Close
// //             </button>
// //           </div>

// //           {/* AskGemini body */}
// //           <div ref={boxRef} className="flex-1 overflow-y-auto p-3">
// //             <AskGemini
// //               logs={typeof logs === 'string' ? logs : logs[tool] ?? ''}
// //             />
// //           </div>
// //         </div>
// //       )}
// //     </>
// //   );
// // }

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\LogPageTemplate.tsx ---
// file: components/LogPageTemplate.tsx
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { ArrowLeft } from 'lucide-react';

type LogPageTemplateProps = {
  title: string;
  iconSrc?: string;
  iconAlt?: string;
  children: React.ReactNode;
};

export default function LogPageTemplate({ title, iconSrc, iconAlt, children }: LogPageTemplateProps) {
  return (
    <main className="min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
      <div className="max-w-5xl mx-auto space-y-6">
        {/* Back to Dashboard Link */}
        <div className="mb-2">
          <Link href="/dashboard" className="flex items-center text-sm text-blue-400 hover:text-blue-300 transition-colors">
            <ArrowLeft size={16} className="mr-2" />
            Back to Dashboard
          </Link>
        </div>

        {/* Header */}
        <header className="flex items-center gap-4">
          {iconSrc && (
            <Image
              src={iconSrc}
              alt={iconAlt || 'Logo'}
              width={60}
              height={60}
              className="rounded-md"
            />
          )}
          <div>
            <h1 className="text-3xl sm:text-4xl font-bold text-blue-400">
              {title}
            </h1>
            <p className="mt-1 text-sm text-gray-400">
              Review recent logs and analyze them with AI.
            </p>
          </div>
        </header>

        {/* This is where the unique page content (logs) will be rendered */}
        {children}
      </div>
    </main>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\QueryForm.tsx ---
// Component: components/QueryForm.tsx
"use client";
import React, { useState } from "react";

export default function QueryForm() {
  const [query, setQuery] = useState("");
  const [result, setResult] = useState<any>(null);

  const handleSubmit = async () => {
    const res = await fetch("/api/query", {
      method: "POST",
      body: JSON.stringify({ query }),
    });
    const data = await res.json();
    setResult(data);
  };

  return (
    <div>
      <textarea
        className="border w-full p-2"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Enter log query"
      />
      <button className="mt-2 p-2 bg-blue-500 text-white" onClick={handleSubmit}>
        Run Query
      </button>

      {result && (
        <div className="mt-4">
          <pre>{JSON.stringify(result, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\SettingsPageLayout.tsx ---
// file: components/SettingsPageLayout.tsx
'use client';

import Link from 'next/link';
import { ArrowLeft } from 'lucide-react';
import Image from 'next/image';

type SettingsPageLayoutProps = {
  title: string;
  description: string;
  backLink?: { href: string; text: string };
  iconSrc?: string;
  children: React.ReactNode;
};

export default function SettingsPageLayout({
  title,
  description,
  backLink = { href: '/dashboard', text: 'Back to Dashboard' },
  iconSrc,
  children,
}: SettingsPageLayoutProps) {
  return (
    <main className="min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
      <div className="max-w-4xl mx-auto">
        {/* Header Section */}
        <div className="mb-8">
          <Link href={backLink.href} className="flex items-center text-sm text-blue-400 hover:text-blue-300 transition-colors">
            <ArrowLeft size={16} className="mr-2" />
            {backLink.text}
          </Link>
          <header className="flex items-center gap-4 mt-2">
            {iconSrc && (
              <Image
                src={iconSrc}
                alt={`${title} Logo`}
                width={60}
                height={60}
                className="rounded-md"
              />
            )}
            <div>
              <h1 className="text-3xl sm:text-4xl font-bold text-white">
                {title}
              </h1>
              <p className="mt-2 text-gray-400">
                {description}
              </p>
            </div>
          </header>
        </div>

        {/* Page-specific content is rendered here */}
        {children}
      </div>
    </main>
  );
}



// // file: components/SettingsPageLayout.tsx
// 'use client';

// import Link from 'next/link';
// import { ArrowLeft } from 'lucide-react';

// type SettingsPageLayoutProps = {
//   title: string;
//   description: string;
//   backLink?: { href: string; text: string };
//   children: React.ReactNode;
// };

// export default function SettingsPageLayout({
//   title,
//   description,
//   backLink = { href: '/dashboard', text: 'Back to Dashboard' },
//   children,
// }: SettingsPageLayoutProps) {
//   return (
//     <main className="min-h-screen bg-gray-900 text-gray-100 p-6 font-sans">
//       <div className="max-w-4xl mx-auto">
//         {/* Header Section */}
//         <div className="mb-8">
//           <Link href={backLink.href} className="flex items-center text-sm text-blue-400 hover:text-blue-300 transition-colors">
//             <ArrowLeft size={16} className="mr-2" />
//             {backLink.text}
//           </Link>
//           <h1 className="text-3xl sm:text-4xl font-bold text-white mt-2">
//             {title}
//           </h1>
//           <p className="mt-2 text-gray-400">
//             {description}
//           </p>
//         </div>

//         {/* Page-specific content is rendered here */}
//         {children}
//       </div>
//     </main>
//   );
// }

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\Sidebar.tsx ---
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import { RiDashboard2Line, RiFileList3Line, RiSettings3Line } from "react-icons/ri";

const nav = [
  { href: "/dashboard", label: "Dashboard", icon: <RiDashboard2Line size={20} /> },
  { href: "/logs", label: "Logs", icon: <RiFileList3Line size={20} /> },
  { href: "/settings", label: "Settings", icon: <RiSettings3Line size={20} /> },
];

export default function Sidebar() {
  const pathname = usePathname();

  return (
    <aside className="h-screen w-60 bg-indigo-700 text-indigo-50 flex flex-col">
      <div className="font-extrabold text-2xl tracking-tight px-6 py-5">
        Observability-CIG
      </div>
      <nav className="flex-1 px-2 space-y-1">
        {nav.map((n) => (
          <Link
            key={n.href}
            href={n.href}
            className={cn(
              "flex items-center gap-3 px-4 py-2 rounded-lg transition-colors",
              pathname?.startsWith(n.href)
                ? "bg-indigo-600"
                : "hover:bg-indigo-600/40"
            )}
          >
            {n.icon}
            <span>{n.label}</span>
          </Link>
        ))}
      </nav>
      <p className="px-4 py-3 text-xs opacity-70">Â© 2025 CIG Dash</p>
    </aside>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\ToolButton.tsx ---
"use client";
import React from "react";

interface ToolButtonProps {
  name: string;
  isActive: boolean;
  onClick: () => void;
}

const ToolButton: React.FC<ToolButtonProps> = ({ name, isActive, onClick }) => {
  return (
    <button
      onClick={isActive ? onClick : undefined}
      disabled={!isActive}
      className={`px-6 py-3 m-2 rounded-xl font-semibold text-sm transition-all shadow-md ${
        isActive
          ? "bg-blue-600 text-white hover:bg-blue-700 active:scale-95"
          : "bg-gray-200 text-gray-500 cursor-not-allowed"
      }`}
    >
      {name}
    </button>
  );
};

export default ToolButton;

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\ToolStatusCard.tsx ---
"use client";

import React from "react";
import type { ReactElement } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { SiDatadog, SiDynatrace } from "react-icons/si";
import { FaTools } from "react-icons/fa";
import { SiAmazon, SiGooglecloud } from "react-icons/si";

interface ToolStatusCardProps {
  name: string;
  active: boolean;
}

const iconMap: Record<string, ReactElement> =  {
  Datadog: <SiDatadog size={36} />,
  Dynatrace: <SiDynatrace size={36} />,
  Sysdig: <FaTools size={36} />,
  AWS: <SiAmazon size={36} />,
  GCP: <SiGooglecloud size={36} />,
};

export default function ToolStatusCard({ name, active }: ToolStatusCardProps) {
  return (
    <Card
  className={`p-5 rounded-2xl shadow-sm border transition-transform transform hover:scale-[1.02] ${
    active ? "bg-white border-green-400" : "bg-white border-gray-300"
  }`}
>
  <CardContent className="flex items-center gap-4">
    <div className="text-indigo-600">{iconMap[name]}</div>
    <div>
      <p className="text-lg font-semibold">{name}</p>
      <p className={`text-sm ${active ? "text-green-600" : "text-gray-500"}`}>
        {active ? "Connected" : "Disconnected"}
      </p>
    </div>
  </CardContent>
</Card>

  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\Topbar.tsx ---
"use client";
import React from "react";
import { usePathname } from "next/navigation";

export default function Topbar() {
  const pathname = usePathname();
  const titleMap: Record<string, string> = {
    "/dashboard": "Dashboard",
    "/logs": "Logs",
    "/settings": "Settings",
  };

  const title = pathname && titleMap[pathname] ? titleMap[pathname] : "Observability-CIG";

  return (
    <header className="h-14 flex items-center px-6 border-b bg-white/60 backdrop-blur">
      <h2 className="text-xl font-bold text-indigo-900">{title}</h2>
    </header>
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\ui\card.tsx ---
import React from "react";
import { cn } from "@/lib/utils";

export function Card({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn("bg-white border rounded-xl shadow-sm", className)} {...props} />
  );
}

export function CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div className={cn("p-4", className)} {...props} />
  );
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\components\ui\switch.tsx ---
'use client';

import * as React from 'react';

interface SwitchProps extends React.InputHTMLAttributes<HTMLInputElement> {}

export const Switch = React.forwardRef<HTMLInputElement, SwitchProps>(
  ({ checked, disabled, ...props }, ref) => {
    return (
      <label className="relative inline-flex items-center cursor-pointer">
        <input
          type="checkbox"
          checked={checked}
          disabled={disabled}
          ref={ref}
          {...props}
          className="sr-only peer"
          readOnly
        />
        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-500 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
      </label>
    );
  }
);

Switch.displayName = 'Switch';

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\config\gcp.ts ---
// file: config/gcp.ts

import logger from '@/utils/logger';

interface GcpProjectConfig {
  name: string;      // e.g., 'projectA'
  projectId: string;
  keyFilename: string;
}

const projects: GcpProjectConfig[] = [];

// Read the master list of project keys from the environment variable
const projectKeysStr = process.env.GCP_PROJECT_KEYS || '';
const projectKeys = projectKeysStr.split(',').map(p => p.trim()).filter(p => p);

// Dynamically build the configuration for each key
projectKeys.forEach(key => {
  const upperKey = key.toUpperCase();
  const projectId = process.env[`GCP_${upperKey}_ID`];
  const keyFilename = process.env[`GCP_${upperKey}_KEY_FILE`];

  if (projectId && keyFilename) {
    projects.push({
      name: key,
      projectId: projectId,
      keyFilename: keyFilename,
    });
  } else {
    logger.warn(`Skipping GCP project "${key}": Missing GCP_${upperKey}_ID or GCP_${upperKey}_KEY_FILE environment variables.`);
  }
});

export const gcpProjectsConfig = projects;
--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\config\gcp_sa_keys\idp-devops-ed47e14ceff0.json ---
{
  "type": "service_account",
  "project_id": "idp-devops",
  "private_key_id": "ed47e14ceff0edd8ec42073b6894bc9e68936ae9",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCXNBcO2+7tV4bp\n0efge6CvNOoDM5LRzAnntMRhqAesRgyexF1JKgouJbtOecZ5CT17XeOmkcNHWMDs\nNLRdzOVU9RWziMhd7D68Z4muE92Jk61QN0/IhZvk4Mb2r76oGCZXiKwkE5LLKkWj\n/2K5D/wPhvHmOiJqhfhuRoYo4N/FwdW1iEaypT6bvv9iHLW6CKE3oxuNtGACFGID\n8EmOnkv60s69Q0WIsYldf0FBLJ75Me/nNjxKF0N4EroZ+UGV3Sb7EEyUcfECL9Qt\n8MzgPYddX+sCcBR5s11d/lgBTKtj0+e1+qR5+jUayQA6VniJW4S/+W10Er1Nppx1\ndeR4AMXVAgMBAAECggEAA+QYxc6eFuh+Nc0riOjViTy02vE8UX7NMHPD6/ltfR7u\nWzWVavkUevyIlevnUh0NQnv3jEVK/66GhG2UyKcpraaC8PRPp68ZLDMD5YFoXY55\n0sshl/jsOpcYN6ftIZlBf1Yqi+EfEXBci2xah4WkSGgCGJkdYp1g98GD2VB0Ibwh\nluOzZNbYqFJmswhHt7+XT6LzX21U/ULukf8akg5P601ZcyTK/rbuUsflBQDmUbjy\n7+wrn+E8TWQ4ogA2Roi3zBH08rLQccBGevLbpVVefZ3monYQvuDL+qHS678j8kvR\neFRyy5LIMdRWHo/1ky1xkzFXS9gy/kx8DzwgB+gEYQKBgQDOoqIFXt+9HyjbbFM/\nZeUGIR/IADyo3iflEjdTgtvlvMLOSQEXuxLqgkIDp1vVitbnagxzQOTudPzlVa3y\nAMHEr1cbyX7IzeNAsb4waZOVsQlH3Aecuu3dUS1MUMNvvhIYvaOM3rFEmhxzPzl2\nuvfE43hzPM0LFCMQVvv7oR9HcQKBgQC7U14hEKRqUAaxNtVqfAORfYqJAKXflENW\n7kfdWvAEZOGDwbZbHMqPHRWnHObS5k7KHwjqMfl1LEsu0pYaatVbWG999M4ZA9f2\npfcrbJE6ddxnvmYo0jHTn44Yu68AE/62la/L7yOiKQIri3UGy21GLZMK4pJz1njK\nn+2colpapQKBgQCmfEx0bUtxciCWIgI0y2EqfhfAKci1+kBEhVfEVmPcBykh0Zoq\nx5RnE8oibX5FYFbkHwKm/bs2EVYNZOoAWPHGCcvyXHdlTNVzs4HcOcQqUHh8yF/t\nvIKX1abcnRnJ92dXPbv/bRGAh3ayuFcRPXUR0oCiwHMoIPJbYOonhFrSUQKBgCIm\ntMZ6bj8jj9THFmlvaocfyB3qDFOSiCRVFKz6Yz+p1KNcsY4y1Yr51nS9BCf27O5U\nch+gNMZz6NEEe3EdgQBCQzFHbDuLQ9gnscQs6t0pl6EiSSWwDH10XUeND/6HpqxK\n5d3cHzb1GvwtVIyEkct1i5U0cVbFBwiJ15vyzV4xAoGBAM3R7/1impM0YFiznfu/\noRr/3LKmmspCu0dfpFbvAQ/sVFKDWAFFWxuD/I1q6NVOOEVlaf4TaD/8s4RO0+4X\nc5un22ZcHhag1a9v5nA8TksJC59GG1PuJuWziP6pSGBzwgqv2Or+nfmhoWSE90fg\n3J2+FiYnGG3MwnTniVJCqJRm\n-----END PRIVATE KEY-----\n",
  "client_email": "log-326@idp-devops.iam.gserviceaccount.com",
  "client_id": "108365833085839747109",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/log-326%40idp-devops.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\config\gcp_sa_keys\virtual-anchor-464210-r8-5a8f7787748f.json ---
{
  "type": "service_account",
  "project_id": "virtual-anchor-464210-r8",
  "private_key_id": "5a8f7787748f94acc920c4187d64153595c4baa8",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQD3c1lBIW3eRMbx\npiBSujcAFPyiqo64B8IWJLN2UTnjk9ZRKpSPfXNpwGjgo6vBLMAAxs9UMnO4i5gq\neiEjd4quFEA1s7AGW0c2onJi33XKuWazKU6pzGswKHc/CouaRxkg8MAtlVLH1Aou\nS5yEz6gtyIi5gvdHPODTohJzc1f1fd5uXrLicvtEXwrFH2rONY9PecPSutbtb4x/\nFENTqoHr5SOcapZd4kbXJao1qRH4V+1Rk7Ke1lFxV/GfbXkRPhUA48xasZkqliX8\n/m3zXrvOL8JKm6X9qFluUmljIdGb24SB+I3ArdWKrXlsg/KQ7RFsK6W9C9ScM7xV\ny4WUGvWLAgMBAAECggEAcxgNOyyD0D64M/x7i07+twSL71MaV8GQBkGi0VT9cns4\nU39VIxqMHHN4tIecIxkf4xyVoYln5r3TFGrC0B7Re5+CsBe4N3SsPl63ioJ6ZMTw\nXkPHyVWBw6AGuuU6QpNwPjCMiocqPjTDWX4kumdlx4m/Al5GirVnszfukhFjp5Qu\nRw1wn2a7oM5xgIIjD5BPx2Piy5bN48t0RiVcYTfvLmmvP95YuCFmXutjMCO/de9q\neDLxbibTN3INV9gWCHb19WOMCB6EXvFggoiycYKqAUb+VHnFiAy5GCrhbeiop6A/\n+o9EtVx5qQxrMAuT7nMuL8y+wYWnP9YvL/fVnrHvfQKBgQD8eKVxqWggTYruhDu5\np8FomQ1PDRnC+d1n2gViPyc7R/zPy43Tu9DNmz3LmZM5er93nHG8+5WhFLF7tE9c\n8BZ1LXGBgcuwzHS75QWs9XBveI2c09WKpWsuCHYDddNij/DCbW7GPusofshWLSSz\nYvO0+0TdK2lST66sw7i1238btQKBgQD66Lz0+fF6z+kQzYec5WfzKqRArHATApAl\n4fYP6H2ctgyEso+EO/Pqdw+YvXo0PGJTTZhtss3bPKnHmuCEn9wBzBGLiaStsHtW\n1lEJXcvNXJdjJBvh5MgeF34l2ZpzOft3MLmSUuR1MZGqVoyNKVILq8C9J0WGfV5q\ngGHibqUUPwKBgQDJc2bnw7nfFKCH4yFY6V9tG7q/2f81UXR1+kQTebrPFYjHMW+w\nhAt/E6ECRT9xPN1sDnu+xKxHBKD9yQkOalAxHZqVMMEcCHgYuQyHTqxxdarheTHJ\n2GYmLAAmkKyj16DPMsySCQBQpqEqCglfzdQSE/CF3a7DS+tf1Sgci9DnhQKBgCqM\n0Y6R3HvBSnsI/9iBpvE76AL3u0HeC2gBO+NSwAqVbOYMCf6Y1DKM4l46s8CsBNiv\nrgvcaMCnNvucrjqPiZXcb5VEUGMMLL57Nd7qwycebqXnd7sFO1KvFTuB/YlQ6e46\nmx3PZOLi9xr19nvx5/IGvHbXdBjspdhV0UO/E8utAoGAA34gP8vQGuIJ4uTakEg+\nc4oKWpP2CzLc18vGlbZbxqujp+Q4QKF6tkB0GjiMcO+Bt6fgfavUMkwI09Z0BDoD\nQ4607o0rDsSj+qb4Tj+AGbpYfpjxYH+DfRcI1bUgJFqJ9VFRvNI2Dymb97s4i93k\n6CWcMfWKOMJGVPYsHMUaecI=\n-----END PRIVATE KEY-----\n",
  "client_email": "og-non-idp-testing@virtual-anchor-464210-r8.iam.gserviceaccount.com",
  "client_id": "117598377298131358391",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/og-non-idp-testing%40virtual-anchor-464210-r8.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\constants\tools.ts ---
// file: constants/tools.ts

export interface ToolConfig {
  key: string;
  name: string;
  description: string;
  logo: string;
  fields: {
    key: string;
    label: string;
    placeholder: string;
    type?: 'text' | 'password' | 'textarea' | 'json' | 'file';
    isJson?: boolean;
    isSecret?: boolean;
  }[];
}

export const TOOL_CONFIGS: ToolConfig[] = [
      {
    key: 'jenkins',
    name: 'Jenkins',
    description: 'Configure your Jenkins CI/CD integration.',
    logo: '/logos/jenkins.png',
    fields: [
      { key: 'JENKINS_BASE_URL', label: 'Jenkins URL', placeholder: 'https://jenkins.example.com', type: 'text' },
      { key: 'JENKINS_USER', label: 'Username', placeholder: 'Your Jenkins username', type: 'text' },
      { key: 'JENKINS_API_TOKEN', label: 'API Token', placeholder: 'Your Jenkins API token', type: 'password', isSecret: true },
      { key: 'JENKINS_JOB_NAMES', label: 'Job Names (comma-separated)', placeholder: 'job-one,job-two,Create GCP Vms', type: 'text' },
    ],
  },
    {
    key: 'cloudwatch',
    name: 'AWS CloudWatch',
    description: 'Configure your AWS CloudWatch integration.',
    logo: '/logos/cloudwatch.png',
    fields: [
      { key: 'AWS_ACCESS_KEY_ID', label: 'Access Key ID', placeholder: 'Your AWS Access Key', type: 'text' },
      { key: 'AWS_SECRET_ACCESS_KEY', label: 'Secret Access Key', placeholder: 'Your AWS Secret Key', type: 'password', isSecret: true },
      {
        key: 'AWS_REGIONS_LOG_GROUPS',
        label: 'Regions and Log Groups (JSON format)',
        placeholder: '[{"region": "us-east-1", "logGroups": ["group-a", "group-b"]}]',
        type: 'textarea',
        isJson: true,
      },
    ],
  },
  {
    key: 'gcp',
    name: 'GCP Logs',
    description: 'Configure your GCP Cloud Logging integration.',
    logo: '/logos/gcp_logging.png',
    fields: [],
  },
  {
    key: 'datadog',
    name: 'Datadog',
    description: 'Configure your Datadog integration.',
    logo: '/logos/datadog.png',
    fields: [
      { key: 'DATADOG_API_KEY', label: 'API Key', placeholder: 'Enter your Datadog API key' },
      { key: 'DATADOG_APP_KEY', label: 'Application Key', placeholder: 'Enter your Datadog Application key' },
    ],
  },
  {
    key: 'dynatrace',
    name: 'Dynatrace',
    description: 'Configure your Dynatrace integration.',
    logo: '/logos/dynatrace.png',
    fields: [
      { key: 'DYNATRACE_API_TOKEN', label: 'API Token', placeholder: 'Enter your Dynatrace API token' },
      { key: 'DYNATRACE_ENVIRONMENT_ID', label: 'Environment ID', placeholder: 'Enter your Dynatrace Environment ID' },
    ],
  },
  {
    key: 'sysdig',
    name: 'Sysdig',
    description: 'Configure your Sysdig integration.',
    logo: '/logos/sysdig.png',
    fields: [
      { key: 'SYSDIG_API_TOKEN', label: 'API Token', placeholder: 'Enter your Sysdig API token' },
    ],
  },
];


--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\jenkins.ts ---
export async function fetchJenkinsLog() {
  const base = process.env.JENKINS_BASE_URL!;
  const token = process.env.JENKINS_API_TOKEN;
  const user = process.env.JENKINS_USER;
  const job = process.env.JENKINS_JOB_NAME!;

  const headers: HeadersInit = token
  ? {
      Authorization:
        "Basic " + Buffer.from(`${user ?? ""}:${token}`).toString("base64"),
    }
  : {};

// Step 1: Get the last 50 builds
const buildsRes = await fetch(
  `${base}/job/${encodeURIComponent(job)}/api/json?tree=builds[number,result,url]{50}`,
  { headers }
);


  if (!buildsRes.ok) {
    throw new Error(`Failed to fetch builds: ${buildsRes.status}`);
  }

  const data = await buildsRes.json();
  const builds = data.builds as { number: number; result: string | null }[];

  // Step 2: Find the most recent successful build
  const target = builds.find(b => b.result === "SUCCESS");

  if (!target) {
    throw new Error("No successful build found in the last 50.");
  }

  // Step 3: Fetch the console log of that build
  const logRes = await fetch(
    `${base}/job/${encodeURIComponent(job)}/${target.number}/consoleText`,
    { headers }
  );

  if (!logRes.ok) {
    throw new Error(`Failed to fetch consoleText: ${logRes.status}`);
  }

  return logRes.text();
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\logFetcher.ts ---
// lib/logFetcher.ts

export async function fetchLogsForTool(tool: string) {
  const now = new Date();
  const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

  switch (tool) {
    case 'Datadog':
      return await fetchDatadogLogs(thirtyDaysAgo, now);

    // Add more tools like CloudWatch, Dynatrace, etc.
    default:
      return { error: `No log fetcher implemented for ${tool}` };
  }
}

// Dummy function for now
async function fetchDatadogLogs(start: Date, end: Date) {
  return {
    tool: 'Datadog',
    range: `${start.toISOString()} - ${end.toISOString()}`,
    logs: [
      'log line 1: service restarted',
      'log line 2: warning CPU > 90%',
      'log line 3: memory pressure detected',
    ],
  };
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\runbook.ts ---

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\toolConfig.ts ---
export const toolStates = [
  {
    name: "Datadog",
    active: !!process.env.NEXT_PUBLIC_DATADOG_API_KEY,
  },
  {
    name: "Dynatrace",
    active: !!process.env.NEXT_PUBLIC_DYNATRACE_API_KEY,
  },
  
];

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\vendors.ts ---
// app/lib/vendors.ts
export const allVendors = [
  {
    name: 'Jenkins',
    key: 'jenkins',
    logo: '/logos/jenkins.png',
    link: '/logs/jenkins',
    envKey: 'NEXT_PUBLIC_VENDOR_JENKINS',
    badge: 'CI/CD',
  },
  {
    name: 'Datadog',
    key: 'datadog',
    logo: '/logos/datadog.png',
    link: '/logs/datadog',
    envKey: 'NEXT_PUBLIC_VENDOR_DATADOG',
  },
  {
    name: 'Dynatrace',
    key: 'dynatrace',
    logo: '/logos/dynatrace.png',
    link: '/logs/dynatrace',
    envKey: 'NEXT_PUBLIC_VENDOR_DYNATRACE',
  },
  // Add other vendors...
];

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\apiClients\cloudwatch.ts ---

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\lib\apiClients\datadog.ts ---

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\pages\api\logs.ts ---
// pages/api/logs.ts

import type { NextApiRequest, NextApiResponse } from 'next';
import { fetchLogsForTool } from '@/lib/logFetcher';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST requests are allowed' });
  }

  try {
    const { tool } = req.body;

    if (!tool) {
      return res.status(400).json({ error: 'Missing tool name in request body' });
    }

    const logs = await fetchLogsForTool(tool);
    return res.status(200).json(logs);
  } catch (error: any) {
    console.error('Error fetching logs:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\chatbot.avif ---
[Error reading file: 'utf-8' codec can't decode byte 0x98 in position 31: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\Intelliswift-1.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\intell_logo_1.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\obser.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\CloudWatch.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\Datadog.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\dynatrace.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\elastic_search.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\gcp.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\gcp_logging.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\Grafaba.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\jenkins.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\pagerduty.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\splunk.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\public\logos\sysdig.png ---
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\styles\globals.css ---
@import "tw-animate-css";

/* Tailwind base layers */
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

/* Optional â€“ soft scrollbars */
::-webkit-scrollbar {
  @apply w-2;
}
::-webkit-scrollbar-thumb {
  @apply bg-indigo-400 rounded-full;
}

/* Theme variables (inline for easier dev overrides) */
@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}


@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

/* Optional: Define global styles using the colors */
@layer base {

  body {
    @apply bg-background text-foreground;
  }
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\types\index.ts ---
export interface ToolStatus {
  name: string;
  envVar: string;
  isActive: boolean;
}

export interface LogQuery {
  tool: string;
  query: string;
}

export interface QueryResult {
  success: boolean;
  data?: any;
  error?: string;
  suggestion?: string;
}

export interface Runbook {
  title: string;
  steps: string[];
}

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\utils\envUtils.ts ---
// file: utils/envUtils.ts

// This is the centralized list of all possible vendors in the application.
// We've added the 'key' property to each object.

export const getVendorList = () => {
  return [
    { 
      key: 'datadog',
      name: 'Datadog',
      logo: '/logos/datadog.png',
      env: process.env.NEXT_PUBLIC_VENDOR_DATADOG,
      ping: '/api/datadog/ping',
      link: '/logs/datadog' 
    },
    { 
      key: 'dynatrace',
      name: 'Dynatrace',
      logo: '/logos/dynatrace.png',
      env: process.env.NEXT_PUBLIC_VENDOR_DYNATRACE,
      ping: '/api/dynatrace/ping',
      link: '/logs/dynatrace' 
    },
    { 
      key: 'sysdig',
      name: 'Sysdig',
      logo: '/logos/sysdig.png',
      env: process.env.NEXT_PUBLIC_VENDOR_SYSDIG,
      ping: '/api/sysdig/ping',
      link: '/logs/sysdig'
    },
    { 
      key: 'cloudwatch',
      name: 'AWS CloudWatch',
      logo: '/logos/cloudwatch.png',
      env: process.env.NEXT_PUBLIC_VENDOR_AWS,
      ping: '/api/cloudwatch/ping',
      link: '/logs/cloudwatch'
    },
    { 
      key: 'gcp',
      name: 'GCP Logs',
      logo: '/logos/gcp_logging.png',
      env: process.env.NEXT_PUBLIC_VENDOR_GCP,
      ping: '/api/gcp/ping',
      link: '/logs/gcp'
    },
    { 
      key: 'jenkins',
      name: 'Jenkins',
      logo: '/logos/jenkins.png',
      env: process.env.NEXT_PUBLIC_VENDOR_JENKINS,
      ping: '/api/jenkins/ping',
      link: '/logs/jenkins',
      badge: 'CI/CD'
    },
  ] as const;
};

--- FILE: C:\Users\KiranKumar\Downloads\observability_cig\observability_cig\utils\logger.ts ---
// file: utils/logger.ts

import pino from 'pino';
import pretty from 'pino-pretty';

// Manually create the stream for pino-pretty
const stream = pretty({
  colorize: true,
  sync: true, // Use synchronous logging in development for more stable output
});

// Initialize pino with the stream if in development
const logger =
  process.env.NODE_ENV === 'development'
    ? pino({ level: 'info' }, stream)
    : pino({ level: 'info' }); // In production, use standard JSON logging

export default logger;